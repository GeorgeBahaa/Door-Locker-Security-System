
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  000031ae  00003242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001b0  008001b0  00003392  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00003394  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001494  00000000  00000000  00006460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000078f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000097ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b488  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b875  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_7>
      20:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__vector_8>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 10 	call	0x2018	; 0x2018 <main>
      8a:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g1_callBackPtr != NULL_PTR) {
     b70:	80 91 b0 01 	lds	r24, 0x01B0
     b74:	90 91 b1 01 	lds	r25, 0x01B1
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	49 f0       	breq	.+18     	; 0xb8e <__vector_9+0x48>
		/* Call the Call Back function in the application after the edge is detected */
		(*g1_callBackPtr)(second_1); /* another method to call the function using pointer to function g_callBackPtr(); */
     b7c:	e0 91 b0 01 	lds	r30, 0x01B0
     b80:	f0 91 b1 01 	lds	r31, 0x01B1
     b84:	80 91 b4 01 	lds	r24, 0x01B4
     b88:	90 91 b5 01 	lds	r25, 0x01B5
     b8c:	09 95       	icall
	}
}
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	bf 91       	pop	r27
     b98:	af 91       	pop	r26
     b9a:	9f 91       	pop	r25
     b9c:	8f 91       	pop	r24
     b9e:	7f 91       	pop	r23
     ba0:	6f 91       	pop	r22
     ba2:	5f 91       	pop	r21
     ba4:	4f 91       	pop	r20
     ba6:	3f 91       	pop	r19
     ba8:	2f 91       	pop	r18
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
	if (g1_callBackPtr != NULL_PTR) {
     bde:	80 91 b0 01 	lds	r24, 0x01B0
     be2:	90 91 b1 01 	lds	r25, 0x01B1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	49 f0       	breq	.+18     	; 0xbfc <__vector_7+0x48>
		/* Call the Call Back function in the application after the edge is detected */
		(*g1_callBackPtr)(second_1); /* another method to call the function using pointer to function g_callBackPtr(); */
     bea:	e0 91 b0 01 	lds	r30, 0x01B0
     bee:	f0 91 b1 01 	lds	r31, 0x01B1
     bf2:	80 91 b4 01 	lds	r24, 0x01B4
     bf6:	90 91 b5 01 	lds	r25, 0x01B5
     bfa:	09 95       	icall
	}
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_8>:

ISR(TIMER1_COMPB_vect) {
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	if (g1_callBackPtr != NULL_PTR) {
     c4c:	80 91 b0 01 	lds	r24, 0x01B0
     c50:	90 91 b1 01 	lds	r25, 0x01B1
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	49 f0       	breq	.+18     	; 0xc6a <__vector_8+0x48>
		/* Call the Call Back function in the application after the edge is detected */
		(*g1_callBackPtr)(second_1); /* another method to call the function using pointer to function g_callBackPtr(); */
     c58:	e0 91 b0 01 	lds	r30, 0x01B0
     c5c:	f0 91 b1 01 	lds	r31, 0x01B1
     c60:	80 91 b4 01 	lds	r24, 0x01B4
     c64:	90 91 b5 01 	lds	r25, 0x01B5
     c68:	09 95       	icall
	}
}
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <Timer1_init>:

/*
 * Description:
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Timer1_init+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Timer1_init+0x8>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01

	/*  timer1 mood as required in configuration */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->mode & 0x03));
     ca0:	af e4       	ldi	r26, 0x4F	; 79
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ef e4       	ldi	r30, 0x4F	; 79
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	98 2f       	mov	r25, r24
     cac:	9c 7f       	andi	r25, 0xFC	; 252
     cae:	e9 81       	ldd	r30, Y+1	; 0x01
     cb0:	fa 81       	ldd	r31, Y+2	; 0x02
     cb2:	83 81       	ldd	r24, Z+3	; 0x03
     cb4:	83 70       	andi	r24, 0x03	; 3
     cb6:	89 2b       	or	r24, r25
     cb8:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->mode & 0x0C) << 1);
     cba:	ae e4       	ldi	r26, 0x4E	; 78
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ee e4       	ldi	r30, 0x4E	; 78
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	28 2f       	mov	r18, r24
     cc6:	27 7e       	andi	r18, 0xE7	; 231
     cc8:	e9 81       	ldd	r30, Y+1	; 0x01
     cca:	fa 81       	ldd	r31, Y+2	; 0x02
     ccc:	83 81       	ldd	r24, Z+3	; 0x03
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	8c 70       	andi	r24, 0x0C	; 12
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	82 2b       	or	r24, r18
     cdc:	8c 93       	st	X, r24

	/*  timer1 Compare as required in configuration */
	TCCR1A = (TCCR1A & 0x3F) | ((Config_Ptr->a_compare_mode)<<6);
     cde:	af e4       	ldi	r26, 0x4F	; 79
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e4       	ldi	r30, 0x4F	; 79
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	28 2f       	mov	r18, r24
     cea:	2f 73       	andi	r18, 0x3F	; 63
     cec:	e9 81       	ldd	r30, Y+1	; 0x01
     cee:	fa 81       	ldd	r31, Y+2	; 0x02
     cf0:	81 85       	ldd	r24, Z+9	; 0x09
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	00 24       	eor	r0, r0
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	07 94       	ror	r0
     cfe:	96 95       	lsr	r25
     d00:	87 95       	ror	r24
     d02:	07 94       	ror	r0
     d04:	98 2f       	mov	r25, r24
     d06:	80 2d       	mov	r24, r0
     d08:	82 2b       	or	r24, r18
     d0a:	8c 93       	st	X, r24
	TCCR1A = (TCCR1A & 0xCF) | ((Config_Ptr->b_compare_mode)<<4);
     d0c:	af e4       	ldi	r26, 0x4F	; 79
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ef e4       	ldi	r30, 0x4F	; 79
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	28 2f       	mov	r18, r24
     d18:	2f 7c       	andi	r18, 0xCF	; 207
     d1a:	e9 81       	ldd	r30, Y+1	; 0x01
     d1c:	fa 81       	ldd	r31, Y+2	; 0x02
     d1e:	82 85       	ldd	r24, Z+10	; 0x0a
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	82 95       	swap	r24
     d26:	92 95       	swap	r25
     d28:	90 7f       	andi	r25, 0xF0	; 240
     d2a:	98 27       	eor	r25, r24
     d2c:	80 7f       	andi	r24, 0xF0	; 240
     d2e:	98 27       	eor	r25, r24
     d30:	82 2b       	or	r24, r18
     d32:	8c 93       	st	X, r24

	/*  timer1 prescaler as required in configuration */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->prescaler));
     d34:	ae e4       	ldi	r26, 0x4E	; 78
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ee e4       	ldi	r30, 0x4E	; 78
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	98 2f       	mov	r25, r24
     d40:	98 7f       	andi	r25, 0xF8	; 248
     d42:	e9 81       	ldd	r30, Y+1	; 0x01
     d44:	fa 81       	ldd	r31, Y+2	; 0x02
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	89 2b       	or	r24, r25
     d4a:	8c 93       	st	X, r24

	/*  timer1 initial value as required in configuration */
	TCNT1 = ((Config_Ptr->initial_value));
     d4c:	ac e4       	ldi	r26, 0x4C	; 76
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e9 81       	ldd	r30, Y+1	; 0x01
     d52:	fa 81       	ldd	r31, Y+2	; 0x02
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	9c 93       	st	X, r25
     d5c:	8e 93       	st	-X, r24

	/*NON PWM*/
	SET_BIT(TCCR1A,FOC1A);
     d5e:	af e4       	ldi	r26, 0x4F	; 79
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ef e4       	ldi	r30, 0x4F	; 79
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
     d6c:	af e4       	ldi	r26, 0x4F	; 79
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ef e4       	ldi	r30, 0x4F	; 79
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	84 60       	ori	r24, 0x04	; 4
     d78:	8c 93       	st	X, r24

	/*  timer1 enable  as required in configuration */
	if((Config_Ptr->mode == CMP_1) | (Config_Ptr->mode == CMP_2)){
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	83 81       	ldd	r24, Z+3	; 0x03
     d80:	1c 82       	std	Y+4, r1	; 0x04
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	11 f4       	brne	.+4      	; 0xd8a <Timer1_init+0xfa>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	8c 83       	std	Y+4, r24	; 0x04
     d8a:	e9 81       	ldd	r30, Y+1	; 0x01
     d8c:	fa 81       	ldd	r31, Y+2	; 0x02
     d8e:	83 81       	ldd	r24, Z+3	; 0x03
     d90:	1b 82       	std	Y+3, r1	; 0x03
     d92:	8c 30       	cpi	r24, 0x0C	; 12
     d94:	11 f4       	brne	.+4      	; 0xd9a <Timer1_init+0x10a>
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9b 83       	std	Y+3, r25	; 0x03
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9b 81       	ldd	r25, Y+3	; 0x03
     d9e:	89 2b       	or	r24, r25
     da0:	88 23       	and	r24, r24
     da2:	39 f1       	breq	.+78     	; 0xdf2 <Timer1_init+0x162>
		if ((Config_Ptr->channel)==Channel_A){
     da4:	e9 81       	ldd	r30, Y+1	; 0x01
     da6:	fa 81       	ldd	r31, Y+2	; 0x02
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	88 23       	and	r24, r24
     dac:	89 f4       	brne	.+34     	; 0xdd0 <Timer1_init+0x140>
			TIMSK |= (1 << OCIE1A);
     dae:	a9 e5       	ldi	r26, 0x59	; 89
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e9 e5       	ldi	r30, 0x59	; 89
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 61       	ori	r24, 0x10	; 16
     dba:	8c 93       	st	X, r24
			/*  timer1 first compare value as required in configuration */
			OCR1A =  (Config_Ptr->a_compare_value);
     dbc:	aa e4       	ldi	r26, 0x4A	; 74
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	95 81       	ldd	r25, Z+5	; 0x05
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	9c 93       	st	X, r25
     dcc:	8e 93       	st	-X, r24
     dce:	18 c0       	rjmp	.+48     	; 0xe00 <Timer1_init+0x170>
		}
		else
		{
			TIMSK |= (1 << OCIE1B);
     dd0:	a9 e5       	ldi	r26, 0x59	; 89
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e9 e5       	ldi	r30, 0x59	; 89
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	8c 93       	st	X, r24
			/*  timer1 first compare value as required in configuration */
			OCR1B =  (Config_Ptr->b_compare_value);
     dde:	a8 e4       	ldi	r26, 0x48	; 72
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e9 81       	ldd	r30, Y+1	; 0x01
     de4:	fa 81       	ldd	r31, Y+2	; 0x02
     de6:	86 81       	ldd	r24, Z+6	; 0x06
     de8:	97 81       	ldd	r25, Z+7	; 0x07
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <Timer1_init+0x170>
		}
	}
	else {
		TIMSK |= (1 << TOIE1)| (1<<TICIE1);
     df2:	a9 e5       	ldi	r26, 0x59	; 89
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e9 e5       	ldi	r30, 0x59	; 89
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 62       	ori	r24, 0x24	; 36
     dfe:	8c 93       	st	X, r24
	}
	SREG |= (1 << 7); //Enable global interrupts in MC by setting the I-Bit.
     e00:	af e5       	ldi	r26, 0x5F	; 95
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	ef e5       	ldi	r30, 0x5F	; 95
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <Timer1_deInit>:

/*
 * Description :
 * Function to De-initialize Timer1.
 */
void Timer1_deInit(void){
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
     e24:	ef e4       	ldi	r30, 0x4F	; 79
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	10 82       	st	Z, r1
	TCCR1B = 0;
     e2a:	ee e4       	ldi	r30, 0x4E	; 78
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	10 82       	st	Z, r1
	TCNT1 = 0;
     e30:	ec e4       	ldi	r30, 0x4C	; 76
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	11 82       	std	Z+1, r1	; 0x01
     e36:	10 82       	st	Z, r1
	OCR1A = 0;
     e38:	ea e4       	ldi	r30, 0x4A	; 74
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	11 82       	std	Z+1, r1	; 0x01
     e3e:	10 82       	st	Z, r1
	OCR1B = 0;
     e40:	e8 e4       	ldi	r30, 0x48	; 72
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	11 82       	std	Z+1, r1	; 0x01
     e46:	10 82       	st	Z, r1
	ICR1 = 0;
     e48:	e6 e4       	ldi	r30, 0x46	; 70
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	11 82       	std	Z+1, r1	; 0x01
     e4e:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1 << OCIE1B) & ~(1 << TOIE1) & ~(1 << TICIE1) & ~(1 << OCIE1A);
     e50:	a9 e5       	ldi	r26, 0x59	; 89
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e9 e5       	ldi	r30, 0x59	; 89
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	83 7c       	andi	r24, 0xC3	; 195
     e5c:	8c 93       	st	X, r24
}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <Timer1_setCallBack>:

/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void (*a_ptr)(uint16)) {
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <Timer1_setCallBack+0x6>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g1_callBackPtr = a_ptr;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	90 93 b1 01 	sts	0x01B1, r25
     e7a:	80 93 b0 01 	sts	0x01B0, r24
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <app_init>:
/*
 * Description :
 * Function to initialize UART and LCD.
 */
void app_init (void)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	2d 97       	sbiw	r28, 0x0d	; 13
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config = {9600,bits_8,DISABLED,ONE,Asynch_Double};
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	9a 87       	std	Y+10, r25	; 0x0a
     ea2:	89 87       	std	Y+9, r24	; 0x09
     ea4:	ee e2       	ldi	r30, 0x2E	; 46
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	fc 87       	std	Y+12, r31	; 0x0c
     eaa:	eb 87       	std	Y+11, r30	; 0x0b
     eac:	f8 e0       	ldi	r31, 0x08	; 8
     eae:	fd 87       	std	Y+13, r31	; 0x0d
     eb0:	eb 85       	ldd	r30, Y+11	; 0x0b
     eb2:	fc 85       	ldd	r31, Y+12	; 0x0c
     eb4:	00 80       	ld	r0, Z
     eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	9c 87       	std	Y+12, r25	; 0x0c
     ebe:	8b 87       	std	Y+11, r24	; 0x0b
     ec0:	e9 85       	ldd	r30, Y+9	; 0x09
     ec2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ec4:	00 82       	st	Z, r0
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	9a 87       	std	Y+10, r25	; 0x0a
     ece:	89 87       	std	Y+9, r24	; 0x09
     ed0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ed2:	91 50       	subi	r25, 0x01	; 1
     ed4:	9d 87       	std	Y+13, r25	; 0x0d
     ed6:	ed 85       	ldd	r30, Y+13	; 0x0d
     ed8:	ee 23       	and	r30, r30
     eda:	51 f7       	brne	.-44     	; 0xeb0 <app_init+0x28>

	/* Initialize ICU driver */
	UART_init(&UART_Config);
     edc:	ce 01       	movw	r24, r28
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <UART_init>

	LCD_init();
     ee4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_init>
}
     ee8:	2d 96       	adiw	r28, 0x0d	; 13
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <receive_command>:
/*
 * Description :
 * Function to receive command.
 */
uint8 receive_command(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	return UART_recieveByte();
     f02:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <UART_recieveByte>
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <send_password_start>:
/*
 * Description :
 * Function to send password to start program.
 */
void send_password_start(void)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	62 97       	sbiw	r28, 0x12	; 18
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
     f20:	ce 01       	movw	r24, r28
     f22:	02 96       	adiw	r24, 0x02	; 2
     f24:	9f 87       	std	Y+15, r25	; 0x0f
     f26:	8e 87       	std	Y+14, r24	; 0x0e
     f28:	e6 e3       	ldi	r30, 0x36	; 54
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	f9 8b       	std	Y+17, r31	; 0x11
     f2e:	e8 8b       	std	Y+16, r30	; 0x10
     f30:	fb e0       	ldi	r31, 0x0B	; 11
     f32:	fa 8b       	std	Y+18, r31	; 0x12
     f34:	e8 89       	ldd	r30, Y+16	; 0x10
     f36:	f9 89       	ldd	r31, Y+17	; 0x11
     f38:	00 80       	ld	r0, Z
     f3a:	88 89       	ldd	r24, Y+16	; 0x10
     f3c:	99 89       	ldd	r25, Y+17	; 0x11
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	99 8b       	std	Y+17, r25	; 0x11
     f42:	88 8b       	std	Y+16, r24	; 0x10
     f44:	ee 85       	ldd	r30, Y+14	; 0x0e
     f46:	ff 85       	ldd	r31, Y+15	; 0x0f
     f48:	00 82       	st	Z, r0
     f4a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f4c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	9f 87       	std	Y+15, r25	; 0x0f
     f52:	8e 87       	std	Y+14, r24	; 0x0e
     f54:	9a 89       	ldd	r25, Y+18	; 0x12
     f56:	91 50       	subi	r25, 0x01	; 1
     f58:	9a 8b       	std	Y+18, r25	; 0x12
     f5a:	ea 89       	ldd	r30, Y+18	; 0x12
     f5c:	ee 23       	and	r30, r30
     f5e:	51 f7       	brne	.-44     	; 0xf34 <send_password_start+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
     f60:	ce 01       	movw	r24, r28
     f62:	02 96       	adiw	r24, 0x02	; 2
     f64:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
     f68:	8d e8       	ldi	r24, 0x8D	; 141
     f6a:	9c e0       	ldi	r25, 0x0C	; 12
     f6c:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
     f70:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
     f72:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Password");
     f76:	20 e6       	ldi	r18, 0x60	; 96
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>

	do{

		key = KEYPAD_getPressedKey();
     f8c:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
     f90:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
     f94:	84 ef       	ldi	r24, 0xF4	; 244
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
     f9c:	8a e2       	ldi	r24, 0x2A	; 42
     f9e:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	20 91 be 01 	lds	r18, 0x01BE
     fac:	fc 01       	movw	r30, r24
     fae:	e9 54       	subi	r30, 0x49	; 73
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	20 83       	st	Z, r18

		if (i>=4 )
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	84 30       	cpi	r24, 0x04	; 4
     fb8:	c0 f0       	brcs	.+48     	; 0xfea <send_password_start+0xde>
		{
			pass_sent[5]='s';
     fba:	83 e7       	ldi	r24, 0x73	; 115
     fbc:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
     fc0:	8e e6       	ldi	r24, 0x6E	; 110
     fc2:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
     fc6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
     fca:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
     fce:	84 ef       	ldi	r24, 0xF4	; 244
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
     fd6:	80 91 be 01 	lds	r24, 0x01BE
     fda:	8d 33       	cpi	r24, 0x3D	; 61
     fdc:	a1 f7       	brne	.-24     	; 0xfc6 <send_password_start+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
     fde:	87 eb       	ldi	r24, 0xB7	; 183
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	67 e0       	ldi	r22, 0x07	; 7
     fe4:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <send_password_start+0xf0>
			break;
		}
		i++;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
     ff0:	f0 91 be 01 	lds	r31, 0x01BE
     ff4:	80 91 be 01 	lds	r24, 0x01BE
     ff8:	8a 30       	cpi	r24, 0x0A	; 10
     ffa:	40 f2       	brcs	.-112    	; 0xf8c <send_password_start+0x80>
	Timer1_deInit();
     ffc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1000:	62 96       	adiw	r28, 0x12	; 18
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <send_password_New>:
/*
 * Description :
 * Function to send password to set new password
 */
void send_password_New(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	62 97       	sbiw	r28, 0x12	; 18
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    1026:	ce 01       	movw	r24, r28
    1028:	02 96       	adiw	r24, 0x02	; 2
    102a:	9f 87       	std	Y+15, r25	; 0x0f
    102c:	8e 87       	std	Y+14, r24	; 0x0e
    102e:	e1 e4       	ldi	r30, 0x41	; 65
    1030:	f1 e0       	ldi	r31, 0x01	; 1
    1032:	f9 8b       	std	Y+17, r31	; 0x11
    1034:	e8 8b       	std	Y+16, r30	; 0x10
    1036:	fb e0       	ldi	r31, 0x0B	; 11
    1038:	fa 8b       	std	Y+18, r31	; 0x12
    103a:	e8 89       	ldd	r30, Y+16	; 0x10
    103c:	f9 89       	ldd	r31, Y+17	; 0x11
    103e:	00 80       	ld	r0, Z
    1040:	88 89       	ldd	r24, Y+16	; 0x10
    1042:	99 89       	ldd	r25, Y+17	; 0x11
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	99 8b       	std	Y+17, r25	; 0x11
    1048:	88 8b       	std	Y+16, r24	; 0x10
    104a:	ee 85       	ldd	r30, Y+14	; 0x0e
    104c:	ff 85       	ldd	r31, Y+15	; 0x0f
    104e:	00 82       	st	Z, r0
    1050:	8e 85       	ldd	r24, Y+14	; 0x0e
    1052:	9f 85       	ldd	r25, Y+15	; 0x0f
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	9f 87       	std	Y+15, r25	; 0x0f
    1058:	8e 87       	std	Y+14, r24	; 0x0e
    105a:	9a 89       	ldd	r25, Y+18	; 0x12
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	ea 89       	ldd	r30, Y+18	; 0x12
    1062:	ee 23       	and	r30, r30
    1064:	51 f7       	brne	.-44     	; 0x103a <send_password_New+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1066:	ce 01       	movw	r24, r28
    1068:	02 96       	adiw	r24, 0x02	; 2
    106a:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    106e:	8d e8       	ldi	r24, 0x8D	; 141
    1070:	9c e0       	ldi	r25, 0x0C	; 12
    1072:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
    1076:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    1078:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter New Pass");
    107c:	2f e6       	ldi	r18, 0x6F	; 111
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	a9 01       	movw	r20, r18
    1086:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>

	do{
		key = KEYPAD_getPressedKey();
    1092:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    1096:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    109a:	84 ef       	ldi	r24, 0xF4	; 244
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
    10a2:	8a e2       	ldi	r24, 0x2A	; 42
    10a4:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	20 91 be 01 	lds	r18, 0x01BE
    10b2:	fc 01       	movw	r30, r24
    10b4:	e9 54       	subi	r30, 0x49	; 73
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	20 83       	st	Z, r18

		if (i>=4 )
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	c0 f0       	brcs	.+48     	; 0x10f0 <send_password_New+0xde>
		{
			pass_sent[5]='#';
    10c0:	83 e2       	ldi	r24, 0x23	; 35
    10c2:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    10c6:	8e e6       	ldi	r24, 0x6E	; 110
    10c8:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
    10cc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    10d0:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
    10d4:	84 ef       	ldi	r24, 0xF4	; 244
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
    10dc:	80 91 be 01 	lds	r24, 0x01BE
    10e0:	8d 33       	cpi	r24, 0x3D	; 61
    10e2:	a1 f7       	brne	.-24     	; 0x10cc <send_password_New+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    10e4:	87 eb       	ldi	r24, 0xB7	; 183
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	67 e0       	ldi	r22, 0x07	; 7
    10ea:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <send_password_New+0xf0>
			break;
		}
		i++;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
    10f6:	f0 91 be 01 	lds	r31, 0x01BE
    10fa:	80 91 be 01 	lds	r24, 0x01BE
    10fe:	8a 30       	cpi	r24, 0x0A	; 10
    1100:	40 f2       	brcs	.-112    	; 0x1092 <send_password_New+0x80>
	Timer1_deInit();
    1102:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1106:	62 96       	adiw	r28, 0x12	; 18
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <resend_password_New>:
/*
 * Description :
 * Function to resend new password
 */
void resend_password_New(void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	62 97       	sbiw	r28, 0x12	; 18
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    112c:	ce 01       	movw	r24, r28
    112e:	02 96       	adiw	r24, 0x02	; 2
    1130:	9f 87       	std	Y+15, r25	; 0x0f
    1132:	8e 87       	std	Y+14, r24	; 0x0e
    1134:	ec e4       	ldi	r30, 0x4C	; 76
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	f9 8b       	std	Y+17, r31	; 0x11
    113a:	e8 8b       	std	Y+16, r30	; 0x10
    113c:	fb e0       	ldi	r31, 0x0B	; 11
    113e:	fa 8b       	std	Y+18, r31	; 0x12
    1140:	e8 89       	ldd	r30, Y+16	; 0x10
    1142:	f9 89       	ldd	r31, Y+17	; 0x11
    1144:	00 80       	ld	r0, Z
    1146:	88 89       	ldd	r24, Y+16	; 0x10
    1148:	99 89       	ldd	r25, Y+17	; 0x11
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	99 8b       	std	Y+17, r25	; 0x11
    114e:	88 8b       	std	Y+16, r24	; 0x10
    1150:	ee 85       	ldd	r30, Y+14	; 0x0e
    1152:	ff 85       	ldd	r31, Y+15	; 0x0f
    1154:	00 82       	st	Z, r0
    1156:	8e 85       	ldd	r24, Y+14	; 0x0e
    1158:	9f 85       	ldd	r25, Y+15	; 0x0f
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	9f 87       	std	Y+15, r25	; 0x0f
    115e:	8e 87       	std	Y+14, r24	; 0x0e
    1160:	9a 89       	ldd	r25, Y+18	; 0x12
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	9a 8b       	std	Y+18, r25	; 0x12
    1166:	ea 89       	ldd	r30, Y+18	; 0x12
    1168:	ee 23       	and	r30, r30
    116a:	51 f7       	brne	.-44     	; 0x1140 <resend_password_New+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    116c:	ce 01       	movw	r24, r28
    116e:	02 96       	adiw	r24, 0x02	; 2
    1170:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1174:	8d e8       	ldi	r24, 0x8D	; 141
    1176:	9c e0       	ldi	r25, 0x0C	; 12
    1178:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
    117c:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    117e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"ReEnter New Pass");
    1182:	2e e7       	ldi	r18, 0x7E	; 126
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>

	do{
		key = KEYPAD_getPressedKey();
    1198:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    119c:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    11a0:	84 ef       	ldi	r24, 0xF4	; 244
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
    11a8:	8a e2       	ldi	r24, 0x2A	; 42
    11aa:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	20 91 be 01 	lds	r18, 0x01BE
    11b8:	fc 01       	movw	r30, r24
    11ba:	e9 54       	subi	r30, 0x49	; 73
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	20 83       	st	Z, r18
		if (i>=4 )
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	84 30       	cpi	r24, 0x04	; 4
    11c4:	c0 f0       	brcs	.+48     	; 0x11f6 <resend_password_New+0xde>
		{
			pass_sent[5]='!';
    11c6:	81 e2       	ldi	r24, 0x21	; 33
    11c8:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    11cc:	8e e6       	ldi	r24, 0x6E	; 110
    11ce:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
    11d2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    11d6:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
    11da:	84 ef       	ldi	r24, 0xF4	; 244
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
    11e2:	80 91 be 01 	lds	r24, 0x01BE
    11e6:	8d 33       	cpi	r24, 0x3D	; 61
    11e8:	a1 f7       	brne	.-24     	; 0x11d2 <resend_password_New+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    11ea:	87 eb       	ldi	r24, 0xB7	; 183
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	67 e0       	ldi	r22, 0x07	; 7
    11f0:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <resend_password_New+0xf0>
			break;
		}
		i++;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
    11fc:	f0 91 be 01 	lds	r31, 0x01BE
    1200:	80 91 be 01 	lds	r24, 0x01BE
    1204:	8a 30       	cpi	r24, 0x0A	; 10
    1206:	40 f2       	brcs	.-112    	; 0x1198 <resend_password_New+0x80>
	Timer1_deInit();
    1208:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    120c:	62 96       	adiw	r28, 0x12	; 18
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <send_password_1>:
/*
 * Description :
 * Function to send password check for the first time
 */
void send_password_1(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	62 97       	sbiw	r28, 0x12	; 18
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    1232:	ce 01       	movw	r24, r28
    1234:	02 96       	adiw	r24, 0x02	; 2
    1236:	9f 87       	std	Y+15, r25	; 0x0f
    1238:	8e 87       	std	Y+14, r24	; 0x0e
    123a:	e7 e5       	ldi	r30, 0x57	; 87
    123c:	f1 e0       	ldi	r31, 0x01	; 1
    123e:	f9 8b       	std	Y+17, r31	; 0x11
    1240:	e8 8b       	std	Y+16, r30	; 0x10
    1242:	fb e0       	ldi	r31, 0x0B	; 11
    1244:	fa 8b       	std	Y+18, r31	; 0x12
    1246:	e8 89       	ldd	r30, Y+16	; 0x10
    1248:	f9 89       	ldd	r31, Y+17	; 0x11
    124a:	00 80       	ld	r0, Z
    124c:	88 89       	ldd	r24, Y+16	; 0x10
    124e:	99 89       	ldd	r25, Y+17	; 0x11
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	99 8b       	std	Y+17, r25	; 0x11
    1254:	88 8b       	std	Y+16, r24	; 0x10
    1256:	ee 85       	ldd	r30, Y+14	; 0x0e
    1258:	ff 85       	ldd	r31, Y+15	; 0x0f
    125a:	00 82       	st	Z, r0
    125c:	8e 85       	ldd	r24, Y+14	; 0x0e
    125e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	9f 87       	std	Y+15, r25	; 0x0f
    1264:	8e 87       	std	Y+14, r24	; 0x0e
    1266:	9a 89       	ldd	r25, Y+18	; 0x12
    1268:	91 50       	subi	r25, 0x01	; 1
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	ea 89       	ldd	r30, Y+18	; 0x12
    126e:	ee 23       	and	r30, r30
    1270:	51 f7       	brne	.-44     	; 0x1246 <send_password_1+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1272:	ce 01       	movw	r24, r28
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    127a:	8d e8       	ldi	r24, 0x8D	; 141
    127c:	9c e0       	ldi	r25, 0x0C	; 12
    127e:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
    1282:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    1284:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-Enter Pass");
    1288:	2f e8       	ldi	r18, 0x8F	; 143
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>
	do{
		key = KEYPAD_getPressedKey();
    129e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    12a2:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    12a6:	84 ef       	ldi	r24, 0xF4	; 244
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
    12ae:	8a e2       	ldi	r24, 0x2A	; 42
    12b0:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	20 91 be 01 	lds	r18, 0x01BE
    12be:	fc 01       	movw	r30, r24
    12c0:	e9 54       	subi	r30, 0x49	; 73
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	20 83       	st	Z, r18

		if (i>=4 )
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	c0 f0       	brcs	.+48     	; 0x12fc <send_password_1+0xde>
		{
			pass_sent[5]='^';
    12cc:	8e e5       	ldi	r24, 0x5E	; 94
    12ce:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    12d2:	8e e6       	ldi	r24, 0x6E	; 110
    12d4:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
    12d8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    12dc:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
    12e0:	84 ef       	ldi	r24, 0xF4	; 244
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
    12e8:	80 91 be 01 	lds	r24, 0x01BE
    12ec:	8d 33       	cpi	r24, 0x3D	; 61
    12ee:	a1 f7       	brne	.-24     	; 0x12d8 <send_password_1+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    12f0:	87 eb       	ldi	r24, 0xB7	; 183
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	67 e0       	ldi	r22, 0x07	; 7
    12f6:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <send_password_1+0xf0>
			break;
		}
		i++;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
    1302:	f0 91 be 01 	lds	r31, 0x01BE
    1306:	80 91 be 01 	lds	r24, 0x01BE
    130a:	8a 30       	cpi	r24, 0x0A	; 10
    130c:	40 f2       	brcs	.-112    	; 0x129e <send_password_1+0x80>
	Timer1_deInit();
    130e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1312:	62 96       	adiw	r28, 0x12	; 18
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <send_password_2>:
/*
 * Description :
 * Function to send password check for the second time
 */
void send_password_2(void)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	62 97       	sbiw	r28, 0x12	; 18
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    1338:	ce 01       	movw	r24, r28
    133a:	02 96       	adiw	r24, 0x02	; 2
    133c:	9f 87       	std	Y+15, r25	; 0x0f
    133e:	8e 87       	std	Y+14, r24	; 0x0e
    1340:	e2 e6       	ldi	r30, 0x62	; 98
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	f9 8b       	std	Y+17, r31	; 0x11
    1346:	e8 8b       	std	Y+16, r30	; 0x10
    1348:	fb e0       	ldi	r31, 0x0B	; 11
    134a:	fa 8b       	std	Y+18, r31	; 0x12
    134c:	e8 89       	ldd	r30, Y+16	; 0x10
    134e:	f9 89       	ldd	r31, Y+17	; 0x11
    1350:	00 80       	ld	r0, Z
    1352:	88 89       	ldd	r24, Y+16	; 0x10
    1354:	99 89       	ldd	r25, Y+17	; 0x11
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	99 8b       	std	Y+17, r25	; 0x11
    135a:	88 8b       	std	Y+16, r24	; 0x10
    135c:	ee 85       	ldd	r30, Y+14	; 0x0e
    135e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1360:	00 82       	st	Z, r0
    1362:	8e 85       	ldd	r24, Y+14	; 0x0e
    1364:	9f 85       	ldd	r25, Y+15	; 0x0f
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	9f 87       	std	Y+15, r25	; 0x0f
    136a:	8e 87       	std	Y+14, r24	; 0x0e
    136c:	9a 89       	ldd	r25, Y+18	; 0x12
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	9a 8b       	std	Y+18, r25	; 0x12
    1372:	ea 89       	ldd	r30, Y+18	; 0x12
    1374:	ee 23       	and	r30, r30
    1376:	51 f7       	brne	.-44     	; 0x134c <send_password_2+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1378:	ce 01       	movw	r24, r28
    137a:	02 96       	adiw	r24, 0x02	; 2
    137c:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1380:	8d e8       	ldi	r24, 0x8D	; 141
    1382:	9c e0       	ldi	r25, 0x0C	; 12
    1384:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
    1388:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    138a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-Enter Pass");
    138e:	2f e8       	ldi	r18, 0x8F	; 143
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>
	do{
		key = KEYPAD_getPressedKey();
    13a4:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    13a8:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    13ac:	84 ef       	ldi	r24, 0xF4	; 244
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
    13b4:	8a e2       	ldi	r24, 0x2A	; 42
    13b6:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	20 91 be 01 	lds	r18, 0x01BE
    13c4:	fc 01       	movw	r30, r24
    13c6:	e9 54       	subi	r30, 0x49	; 73
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	20 83       	st	Z, r18
		if (i>=4 )
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	c0 f0       	brcs	.+48     	; 0x1402 <send_password_2+0xde>
		{
			pass_sent[5]='&';
    13d2:	86 e2       	ldi	r24, 0x26	; 38
    13d4:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    13d8:	8e e6       	ldi	r24, 0x6E	; 110
    13da:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
    13de:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    13e2:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
    13e6:	84 ef       	ldi	r24, 0xF4	; 244
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
    13ee:	80 91 be 01 	lds	r24, 0x01BE
    13f2:	8d 33       	cpi	r24, 0x3D	; 61
    13f4:	a1 f7       	brne	.-24     	; 0x13de <send_password_2+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    13f6:	87 eb       	ldi	r24, 0xB7	; 183
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	67 e0       	ldi	r22, 0x07	; 7
    13fc:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <send_password_2+0xf0>
			break;
		}
		i++;
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
    1408:	f0 91 be 01 	lds	r31, 0x01BE
    140c:	80 91 be 01 	lds	r24, 0x01BE
    1410:	8a 30       	cpi	r24, 0x0A	; 10
    1412:	40 f2       	brcs	.-112    	; 0x13a4 <send_password_2+0x80>
	Timer1_deInit();
    1414:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1418:	62 96       	adiw	r28, 0x12	; 18
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <main_options>:
/*
 * Description :
 * Function to display options and send selected one.
 */
void main_options(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	61 97       	sbiw	r28, 0x11	; 17
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	9e 87       	std	Y+14, r25	; 0x0e
    1444:	8d 87       	std	Y+13, r24	; 0x0d
    1446:	ed e6       	ldi	r30, 0x6D	; 109
    1448:	f1 e0       	ldi	r31, 0x01	; 1
    144a:	f8 8b       	std	Y+16, r31	; 0x10
    144c:	ef 87       	std	Y+15, r30	; 0x0f
    144e:	fb e0       	ldi	r31, 0x0B	; 11
    1450:	f9 8b       	std	Y+17, r31	; 0x11
    1452:	ef 85       	ldd	r30, Y+15	; 0x0f
    1454:	f8 89       	ldd	r31, Y+16	; 0x10
    1456:	00 80       	ld	r0, Z
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	8f 87       	std	Y+15, r24	; 0x0f
    1462:	ed 85       	ldd	r30, Y+13	; 0x0d
    1464:	fe 85       	ldd	r31, Y+14	; 0x0e
    1466:	00 82       	st	Z, r0
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	9e 87       	std	Y+14, r25	; 0x0e
    1470:	8d 87       	std	Y+13, r24	; 0x0d
    1472:	99 89       	ldd	r25, Y+17	; 0x11
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	99 8b       	std	Y+17, r25	; 0x11
    1478:	e9 89       	ldd	r30, Y+17	; 0x11
    147a:	ee 23       	and	r30, r30
    147c:	51 f7       	brne	.-44     	; 0x1452 <main_options+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1486:	8d e8       	ldi	r24, 0x8D	; 141
    1488:	9c e0       	ldi	r25, 0x0C	; 12
    148a:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	LCD_clearScreen();
    148e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+: Open Door");
    1492:	2d e9       	ldi	r18, 0x9D	; 157
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-: Change Pass");
    14a0:	2a ea       	ldi	r18, 0xAA	; 170
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>

	do {
		key = KEYPAD_getPressedKey();
    14ae:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    14b2:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    14b6:	84 ef       	ldi	r24, 0xF4	; 244
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		if (key == '+'||key =='-')
    14be:	80 91 be 01 	lds	r24, 0x01BE
    14c2:	8b 32       	cpi	r24, 0x2B	; 43
    14c4:	21 f0       	breq	.+8      	; 0x14ce <main_options+0xa4>
    14c6:	80 91 be 01 	lds	r24, 0x01BE
    14ca:	8d 32       	cpi	r24, 0x2D	; 45
    14cc:	81 f4       	brne	.+32     	; 0x14ee <main_options+0xc4>
		{
			pass_sent[0] = key;
    14ce:	80 91 be 01 	lds	r24, 0x01BE
    14d2:	80 93 b7 01 	sts	0x01B7, r24

			pass_sent[5]='m';
    14d6:	8d e6       	ldi	r24, 0x6D	; 109
    14d8:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    14dc:	8e e6       	ldi	r24, 0x6E	; 110
    14de:	80 93 bd 01 	sts	0x01BD, r24

			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    14e2:	87 eb       	ldi	r24, 0xB7	; 183
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	67 e0       	ldi	r22, 0x07	; 7
    14e8:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <main_options+0xd0>
			break;
		}
	}while ( (key >= 0) && (key<= 9));
    14ee:	f0 91 be 01 	lds	r31, 0x01BE
    14f2:	80 91 be 01 	lds	r24, 0x01BE
    14f6:	8a 30       	cpi	r24, 0x0A	; 10
    14f8:	d0 f2       	brcs	.-76     	; 0x14ae <main_options+0x84>
	Timer1_deInit();
    14fa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    14fe:	61 96       	adiw	r28, 0x11	; 17
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <send_password_open>:
/*
 * Description :
 * Function to send password to open door
 */
void send_password_open(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	62 97       	sbiw	r28, 0x12	; 18
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    1524:	ce 01       	movw	r24, r28
    1526:	02 96       	adiw	r24, 0x02	; 2
    1528:	9f 87       	std	Y+15, r25	; 0x0f
    152a:	8e 87       	std	Y+14, r24	; 0x0e
    152c:	e8 e7       	ldi	r30, 0x78	; 120
    152e:	f1 e0       	ldi	r31, 0x01	; 1
    1530:	f9 8b       	std	Y+17, r31	; 0x11
    1532:	e8 8b       	std	Y+16, r30	; 0x10
    1534:	fb e0       	ldi	r31, 0x0B	; 11
    1536:	fa 8b       	std	Y+18, r31	; 0x12
    1538:	e8 89       	ldd	r30, Y+16	; 0x10
    153a:	f9 89       	ldd	r31, Y+17	; 0x11
    153c:	00 80       	ld	r0, Z
    153e:	88 89       	ldd	r24, Y+16	; 0x10
    1540:	99 89       	ldd	r25, Y+17	; 0x11
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	99 8b       	std	Y+17, r25	; 0x11
    1546:	88 8b       	std	Y+16, r24	; 0x10
    1548:	ee 85       	ldd	r30, Y+14	; 0x0e
    154a:	ff 85       	ldd	r31, Y+15	; 0x0f
    154c:	00 82       	st	Z, r0
    154e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1550:	9f 85       	ldd	r25, Y+15	; 0x0f
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	9f 87       	std	Y+15, r25	; 0x0f
    1556:	8e 87       	std	Y+14, r24	; 0x0e
    1558:	9a 89       	ldd	r25, Y+18	; 0x12
    155a:	91 50       	subi	r25, 0x01	; 1
    155c:	9a 8b       	std	Y+18, r25	; 0x12
    155e:	ea 89       	ldd	r30, Y+18	; 0x12
    1560:	ee 23       	and	r30, r30
    1562:	51 f7       	brne	.-44     	; 0x1538 <send_password_open+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1564:	ce 01       	movw	r24, r28
    1566:	02 96       	adiw	r24, 0x02	; 2
    1568:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    156c:	8d e8       	ldi	r24, 0x8D	; 141
    156e:	9c e0       	ldi	r25, 0x0C	; 12
    1570:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
    1574:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    1576:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Open Pass");
    157a:	29 eb       	ldi	r18, 0xB9	; 185
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>
	do{
		key = KEYPAD_getPressedKey();
    1590:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    1594:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    1598:	84 ef       	ldi	r24, 0xF4	; 244
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
    15a0:	8a e2       	ldi	r24, 0x2A	; 42
    15a2:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	20 91 be 01 	lds	r18, 0x01BE
    15b0:	fc 01       	movw	r30, r24
    15b2:	e9 54       	subi	r30, 0x49	; 73
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	20 83       	st	Z, r18
		if (i>=4 )
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	c0 f0       	brcs	.+48     	; 0x15ee <send_password_open+0xde>
		{
			pass_sent[5]='%';
    15be:	85 e2       	ldi	r24, 0x25	; 37
    15c0:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    15c4:	8e e6       	ldi	r24, 0x6E	; 110
    15c6:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
    15ca:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    15ce:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
    15d2:	84 ef       	ldi	r24, 0xF4	; 244
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
    15da:	80 91 be 01 	lds	r24, 0x01BE
    15de:	8d 33       	cpi	r24, 0x3D	; 61
    15e0:	a1 f7       	brne	.-24     	; 0x15ca <send_password_open+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    15e2:	87 eb       	ldi	r24, 0xB7	; 183
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	67 e0       	ldi	r22, 0x07	; 7
    15e8:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <send_password_open+0xf0>
			break;
		}
		i++;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
    15f4:	f0 91 be 01 	lds	r31, 0x01BE
    15f8:	80 91 be 01 	lds	r24, 0x01BE
    15fc:	8a 30       	cpi	r24, 0x0A	; 10
    15fe:	40 f2       	brcs	.-112    	; 0x1590 <send_password_open+0x80>
	Timer1_deInit();
    1600:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1604:	62 96       	adiw	r28, 0x12	; 18
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <send_password_reset>:
/*
 * Description :
 * Function to send password to reset password
 */
void send_password_reset(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	62 97       	sbiw	r28, 0x12	; 18
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    162a:	ce 01       	movw	r24, r28
    162c:	02 96       	adiw	r24, 0x02	; 2
    162e:	9f 87       	std	Y+15, r25	; 0x0f
    1630:	8e 87       	std	Y+14, r24	; 0x0e
    1632:	e3 e8       	ldi	r30, 0x83	; 131
    1634:	f1 e0       	ldi	r31, 0x01	; 1
    1636:	f9 8b       	std	Y+17, r31	; 0x11
    1638:	e8 8b       	std	Y+16, r30	; 0x10
    163a:	fb e0       	ldi	r31, 0x0B	; 11
    163c:	fa 8b       	std	Y+18, r31	; 0x12
    163e:	e8 89       	ldd	r30, Y+16	; 0x10
    1640:	f9 89       	ldd	r31, Y+17	; 0x11
    1642:	00 80       	ld	r0, Z
    1644:	88 89       	ldd	r24, Y+16	; 0x10
    1646:	99 89       	ldd	r25, Y+17	; 0x11
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	99 8b       	std	Y+17, r25	; 0x11
    164c:	88 8b       	std	Y+16, r24	; 0x10
    164e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1650:	ff 85       	ldd	r31, Y+15	; 0x0f
    1652:	00 82       	st	Z, r0
    1654:	8e 85       	ldd	r24, Y+14	; 0x0e
    1656:	9f 85       	ldd	r25, Y+15	; 0x0f
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	9f 87       	std	Y+15, r25	; 0x0f
    165c:	8e 87       	std	Y+14, r24	; 0x0e
    165e:	9a 89       	ldd	r25, Y+18	; 0x12
    1660:	91 50       	subi	r25, 0x01	; 1
    1662:	9a 8b       	std	Y+18, r25	; 0x12
    1664:	ea 89       	ldd	r30, Y+18	; 0x12
    1666:	ee 23       	and	r30, r30
    1668:	51 f7       	brne	.-44     	; 0x163e <send_password_reset+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    166a:	ce 01       	movw	r24, r28
    166c:	02 96       	adiw	r24, 0x02	; 2
    166e:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1672:	8d e8       	ldi	r24, 0x8D	; 141
    1674:	9c e0       	ldi	r25, 0x0C	; 12
    1676:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	uint8 i=0;
    167a:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    167c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Old Pass");
    1680:	29 ec       	ldi	r18, 0xC9	; 201
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	a9 01       	movw	r20, r18
    168a:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>
	do{
		key = KEYPAD_getPressedKey();
    1696:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    169a:	80 93 be 01 	sts	0x01BE, r24

		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		Timer1_Delay(500);
    169e:	84 ef       	ldi	r24, 0xF4	; 244
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

		LCD_displayCharacter('*');
    16a6:	8a e2       	ldi	r24, 0x2A	; 42
    16a8:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>

		pass_sent[i] = key;
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	20 91 be 01 	lds	r18, 0x01BE
    16b6:	fc 01       	movw	r30, r24
    16b8:	e9 54       	subi	r30, 0x49	; 73
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	20 83       	st	Z, r18
		if (i>=4 )
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	c0 f0       	brcs	.+48     	; 0x16f4 <send_password_reset+0xde>
		{
			pass_sent[5]='@';
    16c4:	80 e4       	ldi	r24, 0x40	; 64
    16c6:	80 93 bc 01 	sts	0x01BC, r24
			pass_sent[6]='n'; //send n to end string
    16ca:	8e e6       	ldi	r24, 0x6E	; 110
    16cc:	80 93 bd 01 	sts	0x01BD, r24
			/*
			 * loop waiting to press enter key
			 * enter key is =
			 */
			do {
				key = KEYPAD_getPressedKey();
    16d0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <KEYPAD_getPressedKey>
    16d4:	80 93 be 01 	sts	0x01BE, r24

				/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
				Timer1_Delay(500);
    16d8:	84 ef       	ldi	r24, 0xF4	; 244
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>
			}while ( (key != '=') );
    16e0:	80 91 be 01 	lds	r24, 0x01BE
    16e4:	8d 33       	cpi	r24, 0x3D	; 61
    16e6:	a1 f7       	brne	.-24     	; 0x16d0 <send_password_reset+0xba>
			/* Send the pressed key to MC2 through UART */
			UART_sendString(pass_sent,7);
    16e8:	87 eb       	ldi	r24, 0xB7	; 183
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	67 e0       	ldi	r22, 0x07	; 7
    16ee:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <UART_sendString>
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <send_password_reset+0xf0>
			break;
		}
		i++;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	89 83       	std	Y+1, r24	; 0x01
	}while ( (key >= 0) && (key<= 9));
    16fa:	f0 91 be 01 	lds	r31, 0x01BE
    16fe:	80 91 be 01 	lds	r24, 0x01BE
    1702:	8a 30       	cpi	r24, 0x0A	; 10
    1704:	40 f2       	brcs	.-112    	; 0x1696 <send_password_reset+0x80>
	Timer1_deInit();
    1706:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    170a:	62 96       	adiw	r28, 0x12	; 18
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <lcd_door_opening>:
/*
 * Description :
 * Function to display motor state
 */
void lcd_door_opening(void)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	60 97       	sbiw	r28, 0x10	; 16
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_1024,CMP_1,7812,0,Channel_A,Normal_compare,Normal_compare};
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	9d 87       	std	Y+13, r25	; 0x0d
    1736:	8c 87       	std	Y+12, r24	; 0x0c
    1738:	ee e8       	ldi	r30, 0x8E	; 142
    173a:	f1 e0       	ldi	r31, 0x01	; 1
    173c:	ff 87       	std	Y+15, r31	; 0x0f
    173e:	ee 87       	std	Y+14, r30	; 0x0e
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	f8 8b       	std	Y+16, r31	; 0x10
    1744:	ee 85       	ldd	r30, Y+14	; 0x0e
    1746:	ff 85       	ldd	r31, Y+15	; 0x0f
    1748:	00 80       	ld	r0, Z
    174a:	8e 85       	ldd	r24, Y+14	; 0x0e
    174c:	9f 85       	ldd	r25, Y+15	; 0x0f
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	9f 87       	std	Y+15, r25	; 0x0f
    1752:	8e 87       	std	Y+14, r24	; 0x0e
    1754:	ec 85       	ldd	r30, Y+12	; 0x0c
    1756:	fd 85       	ldd	r31, Y+13	; 0x0d
    1758:	00 82       	st	Z, r0
    175a:	8c 85       	ldd	r24, Y+12	; 0x0c
    175c:	9d 85       	ldd	r25, Y+13	; 0x0d
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	9d 87       	std	Y+13, r25	; 0x0d
    1762:	8c 87       	std	Y+12, r24	; 0x0c
    1764:	98 89       	ldd	r25, Y+16	; 0x10
    1766:	91 50       	subi	r25, 0x01	; 1
    1768:	98 8b       	std	Y+16, r25	; 0x10
    176a:	e8 89       	ldd	r30, Y+16	; 0x10
    176c:	ee 23       	and	r30, r30
    176e:	51 f7       	brne	.-44     	; 0x1744 <lcd_door_opening+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1778:	8d e8       	ldi	r24, 0x8D	; 141
    177a:	9c e0       	ldi	r25, 0x0C	; 12
    177c:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	LCD_clearScreen();
    1780:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is Opening");
    1784:	28 ed       	ldi	r18, 0xD8	; 216
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>

	Timer1_Delay (15);
    1792:	8f e0       	ldi	r24, 0x0F	; 15
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

	LCD_clearScreen();
    179a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is Open");
    179e:	28 ee       	ldi	r18, 0xE8	; 232
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>

	Timer1_Delay (3);
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

	LCD_clearScreen();
    17b4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is Closing");
    17b8:	25 ef       	ldi	r18, 0xF5	; 245
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>

	Timer1_Delay (15);
    17c6:	8f e0       	ldi	r24, 0x0F	; 15
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

	Timer1_deInit();
    17ce:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    17d2:	60 96       	adiw	r28, 0x10	; 16
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <error_message>:
/*
 * Description :
 * Function to show error message if pass is incorrect for 3 times
 */
void error_message(void)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	60 97       	sbiw	r28, 0x10	; 16
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_1024,CMP_1,7812,0,Channel_A,Normal_compare,Normal_compare};
    17f8:	ce 01       	movw	r24, r28
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	9d 87       	std	Y+13, r25	; 0x0d
    17fe:	8c 87       	std	Y+12, r24	; 0x0c
    1800:	e9 e9       	ldi	r30, 0x99	; 153
    1802:	f1 e0       	ldi	r31, 0x01	; 1
    1804:	ff 87       	std	Y+15, r31	; 0x0f
    1806:	ee 87       	std	Y+14, r30	; 0x0e
    1808:	fb e0       	ldi	r31, 0x0B	; 11
    180a:	f8 8b       	std	Y+16, r31	; 0x10
    180c:	ee 85       	ldd	r30, Y+14	; 0x0e
    180e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1810:	00 80       	ld	r0, Z
    1812:	8e 85       	ldd	r24, Y+14	; 0x0e
    1814:	9f 85       	ldd	r25, Y+15	; 0x0f
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	9f 87       	std	Y+15, r25	; 0x0f
    181a:	8e 87       	std	Y+14, r24	; 0x0e
    181c:	ec 85       	ldd	r30, Y+12	; 0x0c
    181e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1820:	00 82       	st	Z, r0
    1822:	8c 85       	ldd	r24, Y+12	; 0x0c
    1824:	9d 85       	ldd	r25, Y+13	; 0x0d
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	9d 87       	std	Y+13, r25	; 0x0d
    182a:	8c 87       	std	Y+12, r24	; 0x0c
    182c:	98 89       	ldd	r25, Y+16	; 0x10
    182e:	91 50       	subi	r25, 0x01	; 1
    1830:	98 8b       	std	Y+16, r25	; 0x10
    1832:	e8 89       	ldd	r30, Y+16	; 0x10
    1834:	ee 23       	and	r30, r30
    1836:	51 f7       	brne	.-44     	; 0x180c <error_message+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1838:	ce 01       	movw	r24, r28
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1840:	8d e8       	ldi	r24, 0x8D	; 141
    1842:	9c e0       	ldi	r25, 0x0C	; 12
    1844:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	LCD_clearScreen();
    1848:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,6,"Error");
    184c:	25 e0       	ldi	r18, 0x05	; 5
    184e:	31 e0       	ldi	r19, 0x01	; 1
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	66 e0       	ldi	r22, 0x06	; 6
    1854:	a9 01       	movw	r20, r18
    1856:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>

	LCD_displayStringRowColumn(1,1,"Pass is wrong");
    185a:	2b e0       	ldi	r18, 0x0B	; 11
    185c:	31 e0       	ldi	r19, 0x01	; 1
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	a9 01       	movw	r20, r18
    1864:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>

	Timer1_Delay (60);
    1868:	8c e3       	ldi	r24, 0x3C	; 60
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

	Timer1_deInit();
    1870:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1874:	60 96       	adiw	r28, 0x10	; 16
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <pass_changed>:
/*
 * Description :
 * Function to show state that changing pass done
 */
void pass_changed(void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	60 97       	sbiw	r28, 0x10	; 16
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_1024,CMP_1,7812,0,Channel_A,Normal_compare,Normal_compare};
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	9d 87       	std	Y+13, r25	; 0x0d
    18a0:	8c 87       	std	Y+12, r24	; 0x0c
    18a2:	e4 ea       	ldi	r30, 0xA4	; 164
    18a4:	f1 e0       	ldi	r31, 0x01	; 1
    18a6:	ff 87       	std	Y+15, r31	; 0x0f
    18a8:	ee 87       	std	Y+14, r30	; 0x0e
    18aa:	fb e0       	ldi	r31, 0x0B	; 11
    18ac:	f8 8b       	std	Y+16, r31	; 0x10
    18ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    18b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    18b2:	00 80       	ld	r0, Z
    18b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    18b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	9f 87       	std	Y+15, r25	; 0x0f
    18bc:	8e 87       	std	Y+14, r24	; 0x0e
    18be:	ec 85       	ldd	r30, Y+12	; 0x0c
    18c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    18c2:	00 82       	st	Z, r0
    18c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	9d 87       	std	Y+13, r25	; 0x0d
    18cc:	8c 87       	std	Y+12, r24	; 0x0c
    18ce:	98 89       	ldd	r25, Y+16	; 0x10
    18d0:	91 50       	subi	r25, 0x01	; 1
    18d2:	98 8b       	std	Y+16, r25	; 0x10
    18d4:	e8 89       	ldd	r30, Y+16	; 0x10
    18d6:	ee 23       	and	r30, r30
    18d8:	51 f7       	brne	.-44     	; 0x18ae <pass_changed+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    18e2:	8d e8       	ldi	r24, 0x8D	; 141
    18e4:	9c e0       	ldi	r25, 0x0C	; 12
    18e6:	0e 94 32 07 	call	0xe64	; 0xe64 <Timer1_setCallBack>

	LCD_clearScreen();
    18ea:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,2,"Pass changed");
    18ee:	29 e1       	ldi	r18, 0x19	; 25
    18f0:	31 e0       	ldi	r19, 0x01	; 1
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	62 e0       	ldi	r22, 0x02	; 2
    18f6:	a9 01       	movw	r20, r18
    18f8:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_displayStringRowColumn>
	Timer1_Delay (5);
    18fc:	85 e0       	ldi	r24, 0x05	; 5
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 b2 0c 	call	0x1964	; 0x1964 <Timer1_Delay>

	Timer1_deInit();
    1904:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Timer1_deInit>
}
    1908:	60 96       	adiw	r28, 0x10	; 16
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <TIMER1_countProcessing>:
/*
 * Description :
 * Function to use TIMER1 as required.
 */
void TIMER1_countProcessing(uint16 second_1) {
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <TIMER1_countProcessing+0x6>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
	g1_tick++;
    1928:	80 91 b2 01 	lds	r24, 0x01B2
    192c:	90 91 b3 01 	lds	r25, 0x01B3
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	90 93 b3 01 	sts	0x01B3, r25
    1936:	80 93 b2 01 	sts	0x01B2, r24
	if (g1_tick == (second_1))
    193a:	20 91 b2 01 	lds	r18, 0x01B2
    193e:	30 91 b3 01 	lds	r19, 0x01B3
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	28 17       	cp	r18, r24
    1948:	39 07       	cpc	r19, r25
    194a:	39 f4       	brne	.+14     	; 0x195a <TIMER1_countProcessing+0x40>
	{
		Timer1_complete =1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	80 93 b6 01 	sts	0x01B6, r24
		g1_tick = 0; //clear the tick counter again to count a new 0.5 second
    1952:	10 92 b3 01 	sts	0x01B3, r1
    1956:	10 92 b2 01 	sts	0x01B2, r1
	}
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <Timer1_Delay>:
/*
 * Description :
 * Function to start Timer1 and count as given.
 */
void Timer1_Delay (uint16 seconds)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <Timer1_Delay+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
	Timer1_complete =0;
    1972:	10 92 b6 01 	sts	0x01B6, r1
	g1_tick = 0;
    1976:	10 92 b3 01 	sts	0x01B3, r1
    197a:	10 92 b2 01 	sts	0x01B2, r1
	second_1 = seconds;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	90 93 b5 01 	sts	0x01B5, r25
    1986:	80 93 b4 01 	sts	0x01B4, r24
	while (Timer1_complete != 1){}
    198a:	80 91 b6 01 	lds	r24, 0x01B6
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	e1 f7       	brne	.-8      	; 0x198a <Timer1_Delay+0x26>
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <GPIO_setupPinDirection+0x6>
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <GPIO_setupPinDirection+0x8>
    19a4:	0f 92       	push	r0
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	6a 83       	std	Y+2, r22	; 0x02
    19ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	88 30       	cpi	r24, 0x08	; 8
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <GPIO_setupPinDirection+0x1c>
    19b6:	d5 c0       	rjmp	.+426    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <GPIO_setupPinDirection+0x24>
    19be:	d1 c0       	rjmp	.+418    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3d 83       	std	Y+5, r19	; 0x05
    19c8:	2c 83       	std	Y+4, r18	; 0x04
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 05       	cpc	r25, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <GPIO_setupPinDirection+0x3a>
    19d4:	43 c0       	rjmp	.+134    	; 0x1a5c <GPIO_setupPinDirection+0xc0>
    19d6:	2c 81       	ldd	r18, Y+4	; 0x04
    19d8:	3d 81       	ldd	r19, Y+5	; 0x05
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	2c f4       	brge	.+10     	; 0x19ea <GPIO_setupPinDirection+0x4e>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <GPIO_setupPinDirection+0x68>
    19e8:	bc c0       	rjmp	.+376    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
    19ea:	2c 81       	ldd	r18, Y+4	; 0x04
    19ec:	3d 81       	ldd	r19, Y+5	; 0x05
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <GPIO_setupPinDirection+0x5a>
    19f4:	5f c0       	rjmp	.+190    	; 0x1ab4 <GPIO_setupPinDirection+0x118>
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <GPIO_setupPinDirection+0x66>
    1a00:	85 c0       	rjmp	.+266    	; 0x1b0c <GPIO_setupPinDirection+0x170>
    1a02:	af c0       	rjmp	.+350    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	a1 f4       	brne	.+40     	; 0x1a32 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a0a:	aa e3       	ldi	r26, 0x3A	; 58
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ea e3       	ldi	r30, 0x3A	; 58
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_setupPinDirection+0x8c>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_setupPinDirection+0x88>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	98 c0       	rjmp	.+304    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a32:	aa e3       	ldi	r26, 0x3A	; 58
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ea e3       	ldi	r30, 0x3A	; 58
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_setupPinDirection+0xb4>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_setupPinDirection+0xb0>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	83 c0       	rjmp	.+262    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	a1 f4       	brne	.+40     	; 0x1a8a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a62:	a7 e3       	ldi	r26, 0x37	; 55
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e7 e3       	ldi	r30, 0x37	; 55
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <GPIO_setupPinDirection+0xe4>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <GPIO_setupPinDirection+0xe0>
    1a84:	84 2b       	or	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	6c c0       	rjmp	.+216    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a8a:	a7 e3       	ldi	r26, 0x37	; 55
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e7 e3       	ldi	r30, 0x37	; 55
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_setupPinDirection+0x10c>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_setupPinDirection+0x108>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	57 c0       	rjmp	.+174    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	a1 f4       	brne	.+40     	; 0x1ae2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1aba:	a4 e3       	ldi	r26, 0x34	; 52
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e4 e3       	ldi	r30, 0x34	; 52
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_setupPinDirection+0x13c>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_setupPinDirection+0x138>
    1adc:	84 2b       	or	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	40 c0       	rjmp	.+128    	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ae2:	a4 e3       	ldi	r26, 0x34	; 52
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e4 e3       	ldi	r30, 0x34	; 52
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_setupPinDirection+0x164>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_setupPinDirection+0x160>
    1b04:	80 95       	com	r24
    1b06:	84 23       	and	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	2b c0       	rjmp	.+86     	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	a1 f4       	brne	.+40     	; 0x1b3a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b12:	a1 e3       	ldi	r26, 0x31	; 49
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e1 e3       	ldi	r30, 0x31	; 49
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <GPIO_setupPinDirection+0x194>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <GPIO_setupPinDirection+0x190>
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b3a:	a1 e3       	ldi	r26, 0x31	; 49
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e1 e3       	ldi	r30, 0x31	; 49
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_setupPinDirection+0x1bc>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_setupPinDirection+0x1b8>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <GPIO_writePin+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <GPIO_writePin+0x8>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	6a 83       	std	Y+2, r22	; 0x02
    1b84:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <GPIO_writePin+0x1c>
    1b8c:	d5 c0       	rjmp	.+426    	; 0x1d38 <GPIO_writePin+0x1c6>
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <GPIO_writePin+0x24>
    1b94:	d1 c0       	rjmp	.+418    	; 0x1d38 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3d 83       	std	Y+5, r19	; 0x05
    1b9e:	2c 83       	std	Y+4, r18	; 0x04
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <GPIO_writePin+0x3a>
    1baa:	43 c0       	rjmp	.+134    	; 0x1c32 <GPIO_writePin+0xc0>
    1bac:	2c 81       	ldd	r18, Y+4	; 0x04
    1bae:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <GPIO_writePin+0x4e>
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	71 f0       	breq	.+28     	; 0x1bda <GPIO_writePin+0x68>
    1bbe:	bc c0       	rjmp	.+376    	; 0x1d38 <GPIO_writePin+0x1c6>
    1bc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <GPIO_writePin+0x5a>
    1bca:	5f c0       	rjmp	.+190    	; 0x1c8a <GPIO_writePin+0x118>
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <GPIO_writePin+0x66>
    1bd6:	85 c0       	rjmp	.+266    	; 0x1ce2 <GPIO_writePin+0x170>
    1bd8:	af c0       	rjmp	.+350    	; 0x1d38 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	a1 f4       	brne	.+40     	; 0x1c08 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1be0:	ab e3       	ldi	r26, 0x3B	; 59
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	eb e3       	ldi	r30, 0x3B	; 59
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GPIO_writePin+0x8c>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <GPIO_writePin+0x88>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	98 c0       	rjmp	.+304    	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_writePin+0xb4>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_writePin+0xb0>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	83 c0       	rjmp	.+262    	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	a1 f4       	brne	.+40     	; 0x1c60 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c38:	a8 e3       	ldi	r26, 0x38	; 56
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 e3       	ldi	r30, 0x38	; 56
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <GPIO_writePin+0xe4>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <GPIO_writePin+0xe0>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	6c c0       	rjmp	.+216    	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c60:	a8 e3       	ldi	r26, 0x38	; 56
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e8 e3       	ldi	r30, 0x38	; 56
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <GPIO_writePin+0x10c>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <GPIO_writePin+0x108>
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	57 c0       	rjmp	.+174    	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	a1 f4       	brne	.+40     	; 0x1cb8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c90:	a5 e3       	ldi	r26, 0x35	; 53
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e5 e3       	ldi	r30, 0x35	; 53
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 2e       	mov	r0, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <GPIO_writePin+0x13c>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	0a 94       	dec	r0
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <GPIO_writePin+0x138>
    1cb2:	84 2b       	or	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	40 c0       	rjmp	.+128    	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1cb8:	a5 e3       	ldi	r26, 0x35	; 53
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e5 e3       	ldi	r30, 0x35	; 53
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <GPIO_writePin+0x164>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <GPIO_writePin+0x160>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	2b c0       	rjmp	.+86     	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	a1 f4       	brne	.+40     	; 0x1d10 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ce8:	a2 e3       	ldi	r26, 0x32	; 50
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e2 e3       	ldi	r30, 0x32	; 50
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <GPIO_writePin+0x194>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <GPIO_writePin+0x190>
    1d0a:	84 2b       	or	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	14 c0       	rjmp	.+40     	; 0x1d38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d10:	a2 e3       	ldi	r26, 0x32	; 50
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e2 e3       	ldi	r30, 0x32	; 50
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <GPIO_writePin+0x1bc>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <GPIO_writePin+0x1b8>
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <GPIO_readPin+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <GPIO_readPin+0x8>
    1d50:	0f 92       	push	r0
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	8a 83       	std	Y+2, r24	; 0x02
    1d58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d5a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	88 30       	cpi	r24, 0x08	; 8
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <GPIO_readPin+0x1c>
    1d62:	84 c0       	rjmp	.+264    	; 0x1e6c <GPIO_readPin+0x124>
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <GPIO_readPin+0x24>
    1d6a:	80 c0       	rjmp	.+256    	; 0x1e6c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	3d 83       	std	Y+5, r19	; 0x05
    1d74:	2c 83       	std	Y+4, r18	; 0x04
    1d76:	4c 81       	ldd	r20, Y+4	; 0x04
    1d78:	5d 81       	ldd	r21, Y+5	; 0x05
    1d7a:	41 30       	cpi	r20, 0x01	; 1
    1d7c:	51 05       	cpc	r21, r1
    1d7e:	79 f1       	breq	.+94     	; 0x1dde <GPIO_readPin+0x96>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	91 05       	cpc	r25, r1
    1d88:	34 f4       	brge	.+12     	; 0x1d96 <GPIO_readPin+0x4e>
    1d8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8e:	21 15       	cp	r18, r1
    1d90:	31 05       	cpc	r19, r1
    1d92:	69 f0       	breq	.+26     	; 0x1dae <GPIO_readPin+0x66>
    1d94:	6b c0       	rjmp	.+214    	; 0x1e6c <GPIO_readPin+0x124>
    1d96:	4c 81       	ldd	r20, Y+4	; 0x04
    1d98:	5d 81       	ldd	r21, Y+5	; 0x05
    1d9a:	42 30       	cpi	r20, 0x02	; 2
    1d9c:	51 05       	cpc	r21, r1
    1d9e:	b9 f1       	breq	.+110    	; 0x1e0e <GPIO_readPin+0xc6>
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <GPIO_readPin+0x64>
    1daa:	49 c0       	rjmp	.+146    	; 0x1e3e <GPIO_readPin+0xf6>
    1dac:	5f c0       	rjmp	.+190    	; 0x1e6c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1dae:	e9 e3       	ldi	r30, 0x39	; 57
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GPIO_readPin+0x7e>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <GPIO_readPin+0x7a>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	88 23       	and	r24, r24
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	49 c0       	rjmp	.+146    	; 0x1e6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	47 c0       	rjmp	.+142    	; 0x1e6c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1dde:	e6 e3       	ldi	r30, 0x36	; 54
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a9 01       	movw	r20, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <GPIO_readPin+0xae>
    1df2:	55 95       	asr	r21
    1df4:	47 95       	ror	r20
    1df6:	8a 95       	dec	r24
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <GPIO_readPin+0xaa>
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	88 23       	and	r24, r24
    1e02:	19 f0       	breq	.+6      	; 0x1e0a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	31 c0       	rjmp	.+98     	; 0x1e6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	2f c0       	rjmp	.+94     	; 0x1e6c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e0e:	e3 e3       	ldi	r30, 0x33	; 51
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a9 01       	movw	r20, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <GPIO_readPin+0xde>
    1e22:	55 95       	asr	r21
    1e24:	47 95       	ror	r20
    1e26:	8a 95       	dec	r24
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <GPIO_readPin+0xda>
    1e2a:	ca 01       	movw	r24, r20
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	88 23       	and	r24, r24
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	19 c0       	rjmp	.+50     	; 0x1e6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e3a:	19 82       	std	Y+1, r1	; 0x01
    1e3c:	17 c0       	rjmp	.+46     	; 0x1e6c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e3e:	e0 e3       	ldi	r30, 0x30	; 48
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a9 01       	movw	r20, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <GPIO_readPin+0x10e>
    1e52:	55 95       	asr	r21
    1e54:	47 95       	ror	r20
    1e56:	8a 95       	dec	r24
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <GPIO_readPin+0x10a>
    1e5a:	ca 01       	movw	r24, r20
    1e5c:	81 70       	andi	r24, 0x01	; 1
    1e5e:	90 70       	andi	r25, 0x00	; 0
    1e60:	88 23       	and	r24, r24
    1e62:	19 f0       	breq	.+6      	; 0x1e6a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e6a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <GPIO_setupPortDirection+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <GPIO_setupPortDirection+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	90 f5       	brcc	.+100    	; 0x1ef8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	3c 83       	std	Y+4, r19	; 0x04
    1e9c:	2b 83       	std	Y+3, r18	; 0x03
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	d1 f0       	breq	.+52     	; 0x1edc <GPIO_setupPortDirection+0x5e>
    1ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <GPIO_setupPortDirection+0x3e>
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	61 f0       	breq	.+24     	; 0x1ed2 <GPIO_setupPortDirection+0x54>
    1eba:	1e c0       	rjmp	.+60     	; 0x1ef8 <GPIO_setupPortDirection+0x7a>
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <GPIO_setupPortDirection+0x68>
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	91 05       	cpc	r25, r1
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <GPIO_setupPortDirection+0x72>
    1ed0:	13 c0       	rjmp	.+38     	; 0x1ef8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ed2:	ea e3       	ldi	r30, 0x3A	; 58
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	80 83       	st	Z, r24
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1edc:	e7 e3       	ldi	r30, 0x37	; 55
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	80 83       	st	Z, r24
    1ee4:	09 c0       	rjmp	.+18     	; 0x1ef8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ee6:	e4 e3       	ldi	r30, 0x34	; 52
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	80 83       	st	Z, r24
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ef0:	e1 e3       	ldi	r30, 0x31	; 49
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <GPIO_writePort+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <GPIO_writePort+0x8>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	84 30       	cpi	r24, 0x04	; 4
    1f1a:	90 f5       	brcc	.+100    	; 0x1f80 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	3c 83       	std	Y+4, r19	; 0x04
    1f24:	2b 83       	std	Y+3, r18	; 0x03
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	d1 f0       	breq	.+52     	; 0x1f64 <GPIO_writePort+0x5e>
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	3c 81       	ldd	r19, Y+4	; 0x04
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <GPIO_writePort+0x3e>
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	61 f0       	breq	.+24     	; 0x1f5a <GPIO_writePort+0x54>
    1f42:	1e c0       	rjmp	.+60     	; 0x1f80 <GPIO_writePort+0x7a>
    1f44:	2b 81       	ldd	r18, Y+3	; 0x03
    1f46:	3c 81       	ldd	r19, Y+4	; 0x04
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	81 f0       	breq	.+32     	; 0x1f6e <GPIO_writePort+0x68>
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	83 30       	cpi	r24, 0x03	; 3
    1f54:	91 05       	cpc	r25, r1
    1f56:	81 f0       	breq	.+32     	; 0x1f78 <GPIO_writePort+0x72>
    1f58:	13 c0       	rjmp	.+38     	; 0x1f80 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f5a:	eb e3       	ldi	r30, 0x3B	; 59
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	80 83       	st	Z, r24
    1f62:	0e c0       	rjmp	.+28     	; 0x1f80 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f64:	e8 e3       	ldi	r30, 0x38	; 56
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	80 83       	st	Z, r24
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f6e:	e5 e3       	ldi	r30, 0x35	; 53
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	80 83       	st	Z, r24
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f78:	e2 e3       	ldi	r30, 0x32	; 50
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <GPIO_readPort+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <GPIO_readPort+0x8>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f9c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	84 30       	cpi	r24, 0x04	; 4
    1fa2:	90 f5       	brcc	.+100    	; 0x2008 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	3c 83       	std	Y+4, r19	; 0x04
    1fac:	2b 83       	std	Y+3, r18	; 0x03
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	d1 f0       	breq	.+52     	; 0x1fec <GPIO_readPort+0x5e>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <GPIO_readPort+0x3e>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <GPIO_readPort+0x54>
    1fca:	1e c0       	rjmp	.+60     	; 0x2008 <GPIO_readPort+0x7a>
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	22 30       	cpi	r18, 0x02	; 2
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	81 f0       	breq	.+32     	; 0x1ff6 <GPIO_readPort+0x68>
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	91 05       	cpc	r25, r1
    1fde:	81 f0       	breq	.+32     	; 0x2000 <GPIO_readPort+0x72>
    1fe0:	13 c0       	rjmp	.+38     	; 0x2008 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1fe2:	e9 e3       	ldi	r30, 0x39	; 57
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	0e c0       	rjmp	.+28     	; 0x2008 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1fec:	e6 e3       	ldi	r30, 0x36	; 54
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ff6:	e3 e3       	ldi	r30, 0x33	; 51
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2000:	e0 e3       	ldi	r30, 0x30	; 48
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2008:	89 81       	ldd	r24, Y+1	; 0x01
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <main>:
#include "application.h"

volatile uint8 command; // variable to store received command

int main(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62

	app_init(); // Initialize UART and LCD drivers
    2020:	0e 94 44 07 	call	0xe88	; 0xe88 <app_init>

	while(1)
	{

		command =  receive_command();  // rescieve command from mc2
    2024:	0e 94 7d 07 	call	0xefa	; 0xefa <receive_command>
    2028:	80 93 bf 01 	sts	0x01BF, r24

		if (command == Start_Program_Pass)
    202c:	80 91 bf 01 	lds	r24, 0x01BF
    2030:	84 36       	cpi	r24, 0x64	; 100
    2032:	19 f4       	brne	.+6      	; 0x203a <main+0x22>
		{
			send_password_start(); //send password to start program
    2034:	0e 94 86 07 	call	0xf0c	; 0xf0c <send_password_start>
    2038:	f5 cf       	rjmp	.-22     	; 0x2024 <main+0xc>
		}
		else if (command == Send_New_Pass)
    203a:	80 91 bf 01 	lds	r24, 0x01BF
    203e:	83 32       	cpi	r24, 0x23	; 35
    2040:	19 f4       	brne	.+6      	; 0x2048 <main+0x30>
		{
			send_password_New(); // set new password
    2042:	0e 94 09 08 	call	0x1012	; 0x1012 <send_password_New>
    2046:	ee cf       	rjmp	.-36     	; 0x2024 <main+0xc>
		}
		else if (command == ReSend_New_Pass)
    2048:	80 91 bf 01 	lds	r24, 0x01BF
    204c:	85 36       	cpi	r24, 0x65	; 101
    204e:	19 f4       	brne	.+6      	; 0x2056 <main+0x3e>
		{
			resend_password_New(); //check new password is correct
    2050:	0e 94 8c 08 	call	0x1118	; 0x1118 <resend_password_New>
    2054:	e7 cf       	rjmp	.-50     	; 0x2024 <main+0xc>
		}
		else if (command == Display_menu)
    2056:	80 91 bf 01 	lds	r24, 0x01BF
    205a:	81 36       	cpi	r24, 0x61	; 97
    205c:	19 f4       	brne	.+6      	; 0x2064 <main+0x4c>
		{
			main_options(); // show options menu
    205e:	0e 94 15 0a 	call	0x142a	; 0x142a <main_options>
    2062:	e0 cf       	rjmp	.-64     	; 0x2024 <main+0xc>
		}
		else if (command == Send_pass_to_open)
    2064:	80 91 bf 01 	lds	r24, 0x01BF
    2068:	82 36       	cpi	r24, 0x62	; 98
    206a:	19 f4       	brne	.+6      	; 0x2072 <main+0x5a>
		{
			send_password_open(); // send password to open door
    206c:	0e 94 88 0a 	call	0x1510	; 0x1510 <send_password_open>
    2070:	d9 cf       	rjmp	.-78     	; 0x2024 <main+0xc>
		}
		else if (command == Display_motor_state)
    2072:	80 91 bf 01 	lds	r24, 0x01BF
    2076:	83 36       	cpi	r24, 0x63	; 99
    2078:	19 f4       	brne	.+6      	; 0x2080 <main+0x68>
		{
			lcd_door_opening(); // display door status
    207a:	0e 94 8e 0b 	call	0x171c	; 0x171c <lcd_door_opening>
    207e:	d2 cf       	rjmp	.-92     	; 0x2024 <main+0xc>
		}
		else if (command == Send_pass_to_reset)
    2080:	80 91 bf 01 	lds	r24, 0x01BF
    2084:	86 36       	cpi	r24, 0x66	; 102
    2086:	19 f4       	brne	.+6      	; 0x208e <main+0x76>
		{
			send_password_reset(); // send password to reset password
    2088:	0e 94 0b 0b 	call	0x1616	; 0x1616 <send_password_reset>
    208c:	cb cf       	rjmp	.-106    	; 0x2024 <main+0xc>
		}
		else if  (command == First_check_pass)
    208e:	80 91 bf 01 	lds	r24, 0x01BF
    2092:	8e 35       	cpi	r24, 0x5E	; 94
    2094:	19 f4       	brne	.+6      	; 0x209c <main+0x84>
		{
			send_password_1(); // check pass for first time
    2096:	0e 94 0f 09 	call	0x121e	; 0x121e <send_password_1>
    209a:	c4 cf       	rjmp	.-120    	; 0x2024 <main+0xc>
		}
		else if  (command == Second_check_pass)
    209c:	80 91 bf 01 	lds	r24, 0x01BF
    20a0:	86 32       	cpi	r24, 0x26	; 38
    20a2:	19 f4       	brne	.+6      	; 0x20aa <main+0x92>
		{
			send_password_2(); // check pass for second time
    20a4:	0e 94 92 09 	call	0x1324	; 0x1324 <send_password_2>
    20a8:	bd cf       	rjmp	.-134    	; 0x2024 <main+0xc>
		}
		else if (command == error_message_display)
    20aa:	80 91 bf 01 	lds	r24, 0x01BF
    20ae:	88 37       	cpi	r24, 0x78	; 120
    20b0:	19 f4       	brne	.+6      	; 0x20b8 <main+0xa0>
		{
			error_message(); // display error message
    20b2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <error_message>
    20b6:	b6 cf       	rjmp	.-148    	; 0x2024 <main+0xc>
		}
		else if (command == pass_is_changed)
    20b8:	80 91 bf 01 	lds	r24, 0x01BF
    20bc:	8d 36       	cpi	r24, 0x6D	; 109
    20be:	09 f0       	breq	.+2      	; 0x20c2 <main+0xaa>
    20c0:	b1 cf       	rjmp	.-158    	; 0x2024 <main+0xc>
		{
			pass_changed(); // pass is changed message
    20c2:	0e 94 43 0c 	call	0x1886	; 0x1886 <pass_changed>
    20c6:	ae cf       	rjmp	.-164    	; 0x2024 <main+0xc>

000020c8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <KEYPAD_getPressedKey+0x6>
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	63 e0       	ldi	r22, 0x03	; 3
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	66 e0       	ldi	r22, 0x06	; 6
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	67 e0       	ldi	r22, 0x07	; 7
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2122:	19 82       	std	Y+1, r1	; 0x01
    2124:	35 c0       	rjmp	.+106    	; 0x2190 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	69 81       	ldd	r22, Y+1	; 0x01
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	69 81       	ldd	r22, Y+1	; 0x01
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    213a:	1a 82       	std	Y+2, r1	; 0x02
    213c:	1e c0       	rjmp	.+60     	; 0x217a <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	98 2f       	mov	r25, r24
    2142:	9c 5f       	subi	r25, 0xFC	; 252
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	69 2f       	mov	r22, r25
    2148:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <GPIO_readPin>
    214c:	88 23       	and	r24, r24
    214e:	91 f4       	brne	.+36     	; 0x2174 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	98 2f       	mov	r25, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	89 0f       	add	r24, r25
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	0e 94 cc 10 	call	0x2198	; 0x2198 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	8a 83       	std	Y+2, r24	; 0x02
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	84 30       	cpi	r24, 0x04	; 4
    217e:	f8 f2       	brcs	.-66     	; 0x213e <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	69 81       	ldd	r22, Y+1	; 0x01
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	84 30       	cpi	r24, 0x04	; 4
    2194:	40 f2       	brcs	.-112    	; 0x2126 <KEYPAD_getPressedKey+0x5e>
    2196:	c5 cf       	rjmp	.-118    	; 0x2122 <KEYPAD_getPressedKey+0x5a>

00002198 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <KEYPAD_4x4_adjustKeyNumber+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    21a6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	3c 83       	std	Y+4, r19	; 0x04
    21b0:	2b 83       	std	Y+3, r18	; 0x03
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	88 30       	cpi	r24, 0x08	; 8
    21b8:	91 05       	cpc	r25, r1
    21ba:	09 f4       	brne	.+2      	; 0x21be <KEYPAD_4x4_adjustKeyNumber+0x26>
    21bc:	70 c0       	rjmp	.+224    	; 0x229e <KEYPAD_4x4_adjustKeyNumber+0x106>
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	3c 81       	ldd	r19, Y+4	; 0x04
    21c2:	29 30       	cpi	r18, 0x09	; 9
    21c4:	31 05       	cpc	r19, r1
    21c6:	5c f5       	brge	.+86     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x86>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	84 30       	cpi	r24, 0x04	; 4
    21ce:	91 05       	cpc	r25, r1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    21d2:	59 c0       	rjmp	.+178    	; 0x2286 <KEYPAD_4x4_adjustKeyNumber+0xee>
    21d4:	2b 81       	ldd	r18, Y+3	; 0x03
    21d6:	3c 81       	ldd	r19, Y+4	; 0x04
    21d8:	25 30       	cpi	r18, 0x05	; 5
    21da:	31 05       	cpc	r19, r1
    21dc:	9c f4       	brge	.+38     	; 0x2204 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	91 05       	cpc	r25, r1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x52>
    21e8:	48 c0       	rjmp	.+144    	; 0x227a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21ea:	2b 81       	ldd	r18, Y+3	; 0x03
    21ec:	3c 81       	ldd	r19, Y+4	; 0x04
    21ee:	23 30       	cpi	r18, 0x03	; 3
    21f0:	31 05       	cpc	r19, r1
    21f2:	0c f0       	brlt	.+2      	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    21f4:	45 c0       	rjmp	.+138    	; 0x2280 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2200:	39 c0       	rjmp	.+114    	; 0x2274 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2202:	67 c0       	rjmp	.+206    	; 0x22d2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2204:	2b 81       	ldd	r18, Y+3	; 0x03
    2206:	3c 81       	ldd	r19, Y+4	; 0x04
    2208:	26 30       	cpi	r18, 0x06	; 6
    220a:	31 05       	cpc	r19, r1
    220c:	09 f4       	brne	.+2      	; 0x2210 <KEYPAD_4x4_adjustKeyNumber+0x78>
    220e:	41 c0       	rjmp	.+130    	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	87 30       	cpi	r24, 0x07	; 7
    2216:	91 05       	cpc	r25, r1
    2218:	0c f0       	brlt	.+2      	; 0x221c <KEYPAD_4x4_adjustKeyNumber+0x84>
    221a:	3e c0       	rjmp	.+124    	; 0x2298 <KEYPAD_4x4_adjustKeyNumber+0x100>
    221c:	37 c0       	rjmp	.+110    	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	2c 30       	cpi	r18, 0x0C	; 12
    2224:	31 05       	cpc	r19, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2228:	46 c0       	rjmp	.+140    	; 0x22b6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	8d 30       	cpi	r24, 0x0D	; 13
    2230:	91 05       	cpc	r25, r1
    2232:	5c f4       	brge	.+22     	; 0x224a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	2a 30       	cpi	r18, 0x0A	; 10
    223a:	31 05       	cpc	r19, r1
    223c:	b1 f1       	breq	.+108    	; 0x22aa <KEYPAD_4x4_adjustKeyNumber+0x112>
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	8b 30       	cpi	r24, 0x0B	; 11
    2244:	91 05       	cpc	r25, r1
    2246:	a4 f5       	brge	.+104    	; 0x22b0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2248:	2d c0       	rjmp	.+90     	; 0x22a4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	2e 30       	cpi	r18, 0x0E	; 14
    2250:	31 05       	cpc	r19, r1
    2252:	b9 f1       	breq	.+110    	; 0x22c2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	8e 30       	cpi	r24, 0x0E	; 14
    225a:	91 05       	cpc	r25, r1
    225c:	7c f1       	brlt	.+94     	; 0x22bc <KEYPAD_4x4_adjustKeyNumber+0x124>
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	2f 30       	cpi	r18, 0x0F	; 15
    2264:	31 05       	cpc	r19, r1
    2266:	79 f1       	breq	.+94     	; 0x22c6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	80 31       	cpi	r24, 0x10	; 16
    226e:	91 05       	cpc	r25, r1
    2270:	69 f1       	breq	.+90     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x134>
    2272:	2f c0       	rjmp	.+94     	; 0x22d2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2274:	87 e0       	ldi	r24, 0x07	; 7
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	2e c0       	rjmp	.+92     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    227a:	88 e0       	ldi	r24, 0x08	; 8
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	2b c0       	rjmp	.+86     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2280:	89 e0       	ldi	r24, 0x09	; 9
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	28 c0       	rjmp	.+80     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2286:	85 e2       	ldi	r24, 0x25	; 37
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	25 c0       	rjmp	.+74     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    228c:	84 e0       	ldi	r24, 0x04	; 4
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	22 c0       	rjmp	.+68     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2292:	85 e0       	ldi	r24, 0x05	; 5
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	1f c0       	rjmp	.+62     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2298:	86 e0       	ldi	r24, 0x06	; 6
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	1c c0       	rjmp	.+56     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    229e:	8a e2       	ldi	r24, 0x2A	; 42
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	19 c0       	rjmp	.+50     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	16 c0       	rjmp	.+44     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	13 c0       	rjmp	.+38     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	10 c0       	rjmp	.+32     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22b6:	8d e2       	ldi	r24, 0x2D	; 45
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    22bc:	8d e0       	ldi	r24, 0x0D	; 13
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    22c2:	19 82       	std	Y+1, r1	; 0x01
    22c4:	08 c0       	rjmp	.+16     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    22c6:	8d e3       	ldi	r24, 0x3D	; 61
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	05 c0       	rjmp	.+10     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22cc:	8b e2       	ldi	r24, 0x2B	; 43
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	2e 97       	sbiw	r28, 0x0e	; 14
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_setupPinDirection>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 ea       	ldi	r26, 0xA0	; 160
    231e:	b1 e4       	ldi	r27, 0x41	; 65
    2320:	8b 87       	std	Y+11, r24	; 0x0b
    2322:	9c 87       	std	Y+12, r25	; 0x0c
    2324:	ad 87       	std	Y+13, r26	; 0x0d
    2326:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6b 85       	ldd	r22, Y+11	; 0x0b
    232a:	7c 85       	ldd	r23, Y+12	; 0x0c
    232c:	8d 85       	ldd	r24, Y+13	; 0x0d
    232e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a ef       	ldi	r20, 0xFA	; 250
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8f 83       	std	Y+7, r24	; 0x07
    2342:	98 87       	std	Y+8, r25	; 0x08
    2344:	a9 87       	std	Y+9, r26	; 0x09
    2346:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_init+0x84>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_init+0x102>
	else if (__tmp > 65535)
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_init+0xe4>
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_init+0xd2>
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_init+0xc6>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_init+0x10e>
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	6f ef       	ldi	r22, 0xFF	; 255
    2400:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2404:	88 e3       	ldi	r24, 0x38	; 56
    2406:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    240a:	8c e0       	ldi	r24, 0x0C	; 12
    240c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_sendCommand>
}
    2416:	2e 96       	adiw	r28, 0x0e	; 14
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	e9 97       	sbiw	r28, 0x39	; 57
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 e8       	ldi	r26, 0x80	; 128
    2458:	bf e3       	ldi	r27, 0x3F	; 63
    245a:	8d ab       	std	Y+53, r24	; 0x35
    245c:	9e ab       	std	Y+54, r25	; 0x36
    245e:	af ab       	std	Y+55, r26	; 0x37
    2460:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6d a9       	ldd	r22, Y+53	; 0x35
    2464:	7e a9       	ldd	r23, Y+54	; 0x36
    2466:	8f a9       	ldd	r24, Y+55	; 0x37
    2468:	98 ad       	ldd	r25, Y+56	; 0x38
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	89 ab       	std	Y+49, r24	; 0x31
    247c:	9a ab       	std	Y+50, r25	; 0x32
    247e:	ab ab       	std	Y+51, r26	; 0x33
    2480:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2482:	69 a9       	ldd	r22, Y+49	; 0x31
    2484:	7a a9       	ldd	r23, Y+50	; 0x32
    2486:	8b a9       	ldd	r24, Y+51	; 0x33
    2488:	9c a9       	ldd	r25, Y+52	; 0x34
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <LCD_sendCommand+0x7c>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	98 ab       	std	Y+48, r25	; 0x30
    24a0:	8f a7       	std	Y+47, r24	; 0x2f
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    24a4:	69 a9       	ldd	r22, Y+49	; 0x31
    24a6:	7a a9       	ldd	r23, Y+50	; 0x32
    24a8:	8b a9       	ldd	r24, Y+51	; 0x33
    24aa:	9c a9       	ldd	r25, Y+52	; 0x34
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6d a9       	ldd	r22, Y+53	; 0x35
    24be:	7e a9       	ldd	r23, Y+54	; 0x36
    24c0:	8f a9       	ldd	r24, Y+55	; 0x37
    24c2:	98 ad       	ldd	r25, Y+56	; 0x38
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	98 ab       	std	Y+48, r25	; 0x30
    24e2:	8f a7       	std	Y+47, r24	; 0x2f
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <LCD_sendCommand+0xdc>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9e a7       	std	Y+46, r25	; 0x2e
    24ec:	8d a7       	std	Y+45, r24	; 0x2d
    24ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_sendCommand+0xca>
    24f6:	9e a7       	std	Y+46, r25	; 0x2e
    24f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fc:	98 a9       	ldd	r25, Y+48	; 0x30
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	98 ab       	std	Y+48, r25	; 0x30
    2502:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8f a5       	ldd	r24, Y+47	; 0x2f
    2506:	98 a9       	ldd	r25, Y+48	; 0x30
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <LCD_sendCommand+0xbe>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	69 a9       	ldd	r22, Y+49	; 0x31
    2510:	7a a9       	ldd	r23, Y+50	; 0x32
    2512:	8b a9       	ldd	r24, Y+51	; 0x33
    2514:	9c a9       	ldd	r25, Y+52	; 0x34
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	98 ab       	std	Y+48, r25	; 0x30
    2520:	8f a7       	std	Y+47, r24	; 0x2f
    2522:	8f a5       	ldd	r24, Y+47	; 0x2f
    2524:	98 a9       	ldd	r25, Y+48	; 0x30
    2526:	9c a7       	std	Y+44, r25	; 0x2c
    2528:	8b a7       	std	Y+43, r24	; 0x2b
    252a:	8b a5       	ldd	r24, Y+43	; 0x2b
    252c:	9c a5       	ldd	r25, Y+44	; 0x2c
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_sendCommand+0x106>
    2532:	9c a7       	std	Y+44, r25	; 0x2c
    2534:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	62 e0       	ldi	r22, 0x02	; 2
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	a0 e8       	ldi	r26, 0x80	; 128
    2546:	bf e3       	ldi	r27, 0x3F	; 63
    2548:	8f a3       	std	Y+39, r24	; 0x27
    254a:	98 a7       	std	Y+40, r25	; 0x28
    254c:	a9 a7       	std	Y+41, r26	; 0x29
    254e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	6f a1       	ldd	r22, Y+39	; 0x27
    2552:	78 a5       	ldd	r23, Y+40	; 0x28
    2554:	89 a5       	ldd	r24, Y+41	; 0x29
    2556:	9a a5       	ldd	r25, Y+42	; 0x2a
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a ef       	ldi	r20, 0xFA	; 250
    255e:	54 e4       	ldi	r21, 0x44	; 68
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8b a3       	std	Y+35, r24	; 0x23
    256a:	9c a3       	std	Y+36, r25	; 0x24
    256c:	ad a3       	std	Y+37, r26	; 0x25
    256e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2570:	6b a1       	ldd	r22, Y+35	; 0x23
    2572:	7c a1       	ldd	r23, Y+36	; 0x24
    2574:	8d a1       	ldd	r24, Y+37	; 0x25
    2576:	9e a1       	ldd	r25, Y+38	; 0x26
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	2c f4       	brge	.+10     	; 0x2592 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9a a3       	std	Y+34, r25	; 0x22
    258e:	89 a3       	std	Y+33, r24	; 0x21
    2590:	3f c0       	rjmp	.+126    	; 0x2610 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2592:	6b a1       	ldd	r22, Y+35	; 0x23
    2594:	7c a1       	ldd	r23, Y+36	; 0x24
    2596:	8d a1       	ldd	r24, Y+37	; 0x25
    2598:	9e a1       	ldd	r25, Y+38	; 0x26
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	4c f5       	brge	.+82     	; 0x25fc <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	6f a1       	ldd	r22, Y+39	; 0x27
    25ac:	78 a5       	ldd	r23, Y+40	; 0x28
    25ae:	89 a5       	ldd	r24, Y+41	; 0x29
    25b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9a a3       	std	Y+34, r25	; 0x22
    25d0:	89 a3       	std	Y+33, r24	; 0x21
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <LCD_sendCommand+0x1ca>
    25d4:	88 ec       	ldi	r24, 0xC8	; 200
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	98 a3       	std	Y+32, r25	; 0x20
    25da:	8f 8f       	std	Y+31, r24	; 0x1f
    25dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25de:	98 a1       	ldd	r25, Y+32	; 0x20
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_sendCommand+0x1b8>
    25e4:	98 a3       	std	Y+32, r25	; 0x20
    25e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ea:	9a a1       	ldd	r25, Y+34	; 0x22
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9a a3       	std	Y+34, r25	; 0x22
    25f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f2:	89 a1       	ldd	r24, Y+33	; 0x21
    25f4:	9a a1       	ldd	r25, Y+34	; 0x22
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	69 f7       	brne	.-38     	; 0x25d4 <LCD_sendCommand+0x1ac>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fc:	6b a1       	ldd	r22, Y+35	; 0x23
    25fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2600:	8d a1       	ldd	r24, Y+37	; 0x25
    2602:	9e a1       	ldd	r25, Y+38	; 0x26
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9a a3       	std	Y+34, r25	; 0x22
    260e:	89 a3       	std	Y+33, r24	; 0x21
    2610:	89 a1       	ldd	r24, Y+33	; 0x21
    2612:	9a a1       	ldd	r25, Y+34	; 0x22
    2614:	9e 8f       	std	Y+30, r25	; 0x1e
    2616:	8d 8f       	std	Y+29, r24	; 0x1d
    2618:	8d 8d       	ldd	r24, Y+29	; 0x1d
    261a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_sendCommand+0x1f4>
    2620:	9e 8f       	std	Y+30, r25	; 0x1e
    2622:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	69 ad       	ldd	r22, Y+57	; 0x39
    2628:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GPIO_writePort>
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	a0 e8       	ldi	r26, 0x80	; 128
    2632:	bf e3       	ldi	r27, 0x3F	; 63
    2634:	89 8f       	std	Y+25, r24	; 0x19
    2636:	9a 8f       	std	Y+26, r25	; 0x1a
    2638:	ab 8f       	std	Y+27, r26	; 0x1b
    263a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	69 8d       	ldd	r22, Y+25	; 0x19
    263e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a ef       	ldi	r20, 0xFA	; 250
    264a:	54 e4       	ldi	r21, 0x44	; 68
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	8d 8b       	std	Y+21, r24	; 0x15
    2656:	9e 8b       	std	Y+22, r25	; 0x16
    2658:	af 8b       	std	Y+23, r26	; 0x17
    265a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    265c:	6d 89       	ldd	r22, Y+21	; 0x15
    265e:	7e 89       	ldd	r23, Y+22	; 0x16
    2660:	8f 89       	ldd	r24, Y+23	; 0x17
    2662:	98 8d       	ldd	r25, Y+24	; 0x18
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e8       	ldi	r20, 0x80	; 128
    266a:	5f e3       	ldi	r21, 0x3F	; 63
    266c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2670:	88 23       	and	r24, r24
    2672:	2c f4       	brge	.+10     	; 0x267e <LCD_sendCommand+0x256>
		__ticks = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9c 8b       	std	Y+20, r25	; 0x14
    267a:	8b 8b       	std	Y+19, r24	; 0x13
    267c:	3f c0       	rjmp	.+126    	; 0x26fc <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    267e:	6d 89       	ldd	r22, Y+21	; 0x15
    2680:	7e 89       	ldd	r23, Y+22	; 0x16
    2682:	8f 89       	ldd	r24, Y+23	; 0x17
    2684:	98 8d       	ldd	r25, Y+24	; 0x18
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	4c f5       	brge	.+82     	; 0x26e8 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	69 8d       	ldd	r22, Y+25	; 0x19
    2698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
    26be:	0f c0       	rjmp	.+30     	; 0x26de <LCD_sendCommand+0x2b6>
    26c0:	88 ec       	ldi	r24, 0xC8	; 200
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9a 8b       	std	Y+18, r25	; 0x12
    26c6:	89 8b       	std	Y+17, r24	; 0x11
    26c8:	89 89       	ldd	r24, Y+17	; 0x11
    26ca:	9a 89       	ldd	r25, Y+18	; 0x12
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_sendCommand+0x2a4>
    26d0:	9a 8b       	std	Y+18, r25	; 0x12
    26d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	9c 8b       	std	Y+20, r25	; 0x14
    26dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	8b 89       	ldd	r24, Y+19	; 0x13
    26e0:	9c 89       	ldd	r25, Y+20	; 0x14
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <LCD_sendCommand+0x298>
    26e6:	14 c0       	rjmp	.+40     	; 0x2710 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ea:	7e 89       	ldd	r23, Y+22	; 0x16
    26ec:	8f 89       	ldd	r24, Y+23	; 0x17
    26ee:	98 8d       	ldd	r25, Y+24	; 0x18
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9c 8b       	std	Y+20, r25	; 0x14
    26fa:	8b 8b       	std	Y+19, r24	; 0x13
    26fc:	8b 89       	ldd	r24, Y+19	; 0x13
    26fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2700:	98 8b       	std	Y+16, r25	; 0x10
    2702:	8f 87       	std	Y+15, r24	; 0x0f
    2704:	8f 85       	ldd	r24, Y+15	; 0x0f
    2706:	98 89       	ldd	r25, Y+16	; 0x10
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_sendCommand+0x2e0>
    270c:	98 8b       	std	Y+16, r25	; 0x10
    270e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	62 e0       	ldi	r22, 0x02	; 2
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e8       	ldi	r26, 0x80	; 128
    2720:	bf e3       	ldi	r27, 0x3F	; 63
    2722:	8b 87       	std	Y+11, r24	; 0x0b
    2724:	9c 87       	std	Y+12, r25	; 0x0c
    2726:	ad 87       	std	Y+13, r26	; 0x0d
    2728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	6b 85       	ldd	r22, Y+11	; 0x0b
    272c:	7c 85       	ldd	r23, Y+12	; 0x0c
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a ef       	ldi	r20, 0xFA	; 250
    2738:	54 e4       	ldi	r21, 0x44	; 68
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8f 83       	std	Y+7, r24	; 0x07
    2744:	98 87       	std	Y+8, r25	; 0x08
    2746:	a9 87       	std	Y+9, r26	; 0x09
    2748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    274a:	6f 81       	ldd	r22, Y+7	; 0x07
    274c:	78 85       	ldd	r23, Y+8	; 0x08
    274e:	89 85       	ldd	r24, Y+9	; 0x09
    2750:	9a 85       	ldd	r25, Y+10	; 0x0a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <LCD_sendCommand+0x344>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	6b 85       	ldd	r22, Y+11	; 0x0b
    2786:	7c 85       	ldd	r23, Y+12	; 0x0c
    2788:	8d 85       	ldd	r24, Y+13	; 0x0d
    278a:	9e 85       	ldd	r25, Y+14	; 0x0e
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <LCD_sendCommand+0x3a4>
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	8b 83       	std	Y+3, r24	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <LCD_sendCommand+0x392>
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <LCD_sendCommand+0x386>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_sendCommand+0x3ce>
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27fe:	e9 96       	adiw	r28, 0x39	; 57
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	e9 97       	sbiw	r28, 0x39	; 57
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	61 e0       	ldi	r22, 0x01	; 1
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e8       	ldi	r26, 0x80	; 128
    2840:	bf e3       	ldi	r27, 0x3F	; 63
    2842:	8d ab       	std	Y+53, r24	; 0x35
    2844:	9e ab       	std	Y+54, r25	; 0x36
    2846:	af ab       	std	Y+55, r26	; 0x37
    2848:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	6d a9       	ldd	r22, Y+53	; 0x35
    284c:	7e a9       	ldd	r23, Y+54	; 0x36
    284e:	8f a9       	ldd	r24, Y+55	; 0x37
    2850:	98 ad       	ldd	r25, Y+56	; 0x38
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a ef       	ldi	r20, 0xFA	; 250
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	89 ab       	std	Y+49, r24	; 0x31
    2864:	9a ab       	std	Y+50, r25	; 0x32
    2866:	ab ab       	std	Y+51, r26	; 0x33
    2868:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    286a:	69 a9       	ldd	r22, Y+49	; 0x31
    286c:	7a a9       	ldd	r23, Y+50	; 0x32
    286e:	8b a9       	ldd	r24, Y+51	; 0x33
    2870:	9c a9       	ldd	r25, Y+52	; 0x34
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
    288a:	3f c0       	rjmp	.+126    	; 0x290a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    288c:	69 a9       	ldd	r22, Y+49	; 0x31
    288e:	7a a9       	ldd	r23, Y+50	; 0x32
    2890:	8b a9       	ldd	r24, Y+51	; 0x33
    2892:	9c a9       	ldd	r25, Y+52	; 0x34
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	6d a9       	ldd	r22, Y+53	; 0x35
    28a6:	7e a9       	ldd	r23, Y+54	; 0x36
    28a8:	8f a9       	ldd	r24, Y+55	; 0x37
    28aa:	98 ad       	ldd	r25, Y+56	; 0x38
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	98 ab       	std	Y+48, r25	; 0x30
    28ca:	8f a7       	std	Y+47, r24	; 0x2f
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <LCD_displayCharacter+0xdc>
    28ce:	88 ec       	ldi	r24, 0xC8	; 200
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9e a7       	std	Y+46, r25	; 0x2e
    28d4:	8d a7       	std	Y+45, r24	; 0x2d
    28d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <LCD_displayCharacter+0xca>
    28de:	9e a7       	std	Y+46, r25	; 0x2e
    28e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e4:	98 a9       	ldd	r25, Y+48	; 0x30
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	98 ab       	std	Y+48, r25	; 0x30
    28ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ee:	98 a9       	ldd	r25, Y+48	; 0x30
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <LCD_displayCharacter+0xbe>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	69 a9       	ldd	r22, Y+49	; 0x31
    28f8:	7a a9       	ldd	r23, Y+50	; 0x32
    28fa:	8b a9       	ldd	r24, Y+51	; 0x33
    28fc:	9c a9       	ldd	r25, Y+52	; 0x34
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	98 ab       	std	Y+48, r25	; 0x30
    2908:	8f a7       	std	Y+47, r24	; 0x2f
    290a:	8f a5       	ldd	r24, Y+47	; 0x2f
    290c:	98 a9       	ldd	r25, Y+48	; 0x30
    290e:	9c a7       	std	Y+44, r25	; 0x2c
    2910:	8b a7       	std	Y+43, r24	; 0x2b
    2912:	8b a5       	ldd	r24, Y+43	; 0x2b
    2914:	9c a5       	ldd	r25, Y+44	; 0x2c
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_displayCharacter+0x106>
    291a:	9c a7       	std	Y+44, r25	; 0x2c
    291c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	62 e0       	ldi	r22, 0x02	; 2
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e8       	ldi	r26, 0x80	; 128
    292e:	bf e3       	ldi	r27, 0x3F	; 63
    2930:	8f a3       	std	Y+39, r24	; 0x27
    2932:	98 a7       	std	Y+40, r25	; 0x28
    2934:	a9 a7       	std	Y+41, r26	; 0x29
    2936:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2938:	6f a1       	ldd	r22, Y+39	; 0x27
    293a:	78 a5       	ldd	r23, Y+40	; 0x28
    293c:	89 a5       	ldd	r24, Y+41	; 0x29
    293e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a ef       	ldi	r20, 0xFA	; 250
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8b a3       	std	Y+35, r24	; 0x23
    2952:	9c a3       	std	Y+36, r25	; 0x24
    2954:	ad a3       	std	Y+37, r26	; 0x25
    2956:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2958:	6b a1       	ldd	r22, Y+35	; 0x23
    295a:	7c a1       	ldd	r23, Y+36	; 0x24
    295c:	8d a1       	ldd	r24, Y+37	; 0x25
    295e:	9e a1       	ldd	r25, Y+38	; 0x26
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9a a3       	std	Y+34, r25	; 0x22
    2976:	89 a3       	std	Y+33, r24	; 0x21
    2978:	3f c0       	rjmp	.+126    	; 0x29f8 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    297a:	6b a1       	ldd	r22, Y+35	; 0x23
    297c:	7c a1       	ldd	r23, Y+36	; 0x24
    297e:	8d a1       	ldd	r24, Y+37	; 0x25
    2980:	9e a1       	ldd	r25, Y+38	; 0x26
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	4c f5       	brge	.+82     	; 0x29e4 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	6f a1       	ldd	r22, Y+39	; 0x27
    2994:	78 a5       	ldd	r23, Y+40	; 0x28
    2996:	89 a5       	ldd	r24, Y+41	; 0x29
    2998:	9a a5       	ldd	r25, Y+42	; 0x2a
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9a a3       	std	Y+34, r25	; 0x22
    29b8:	89 a3       	std	Y+33, r24	; 0x21
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <LCD_displayCharacter+0x1ca>
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	98 a3       	std	Y+32, r25	; 0x20
    29c2:	8f 8f       	std	Y+31, r24	; 0x1f
    29c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c6:	98 a1       	ldd	r25, Y+32	; 0x20
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_displayCharacter+0x1b8>
    29cc:	98 a3       	std	Y+32, r25	; 0x20
    29ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	89 a1       	ldd	r24, Y+33	; 0x21
    29d2:	9a a1       	ldd	r25, Y+34	; 0x22
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9a a3       	std	Y+34, r25	; 0x22
    29d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	89 a1       	ldd	r24, Y+33	; 0x21
    29dc:	9a a1       	ldd	r25, Y+34	; 0x22
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <LCD_displayCharacter+0x1ac>
    29e2:	14 c0       	rjmp	.+40     	; 0x2a0c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	6b a1       	ldd	r22, Y+35	; 0x23
    29e6:	7c a1       	ldd	r23, Y+36	; 0x24
    29e8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ea:	9e a1       	ldd	r25, Y+38	; 0x26
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9a a3       	std	Y+34, r25	; 0x22
    29f6:	89 a3       	std	Y+33, r24	; 0x21
    29f8:	89 a1       	ldd	r24, Y+33	; 0x21
    29fa:	9a a1       	ldd	r25, Y+34	; 0x22
    29fc:	9e 8f       	std	Y+30, r25	; 0x1e
    29fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_displayCharacter+0x1f4>
    2a08:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	69 ad       	ldd	r22, Y+57	; 0x39
    2a10:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GPIO_writePort>
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	a0 e8       	ldi	r26, 0x80	; 128
    2a1a:	bf e3       	ldi	r27, 0x3F	; 63
    2a1c:	89 8f       	std	Y+25, r24	; 0x19
    2a1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a20:	ab 8f       	std	Y+27, r26	; 0x1b
    2a22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	69 8d       	ldd	r22, Y+25	; 0x19
    2a26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4a ef       	ldi	r20, 0xFA	; 250
    2a32:	54 e4       	ldi	r21, 0x44	; 68
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	8d 8b       	std	Y+21, r24	; 0x15
    2a3e:	9e 8b       	std	Y+22, r25	; 0x16
    2a40:	af 8b       	std	Y+23, r26	; 0x17
    2a42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a44:	6d 89       	ldd	r22, Y+21	; 0x15
    2a46:	7e 89       	ldd	r23, Y+22	; 0x16
    2a48:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2a66:	6d 89       	ldd	r22, Y+21	; 0x15
    2a68:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	57 e4       	ldi	r21, 0x47	; 71
    2a76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	4c f5       	brge	.+82     	; 0x2ad0 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e2       	ldi	r20, 0x20	; 32
    2a8c:	51 e4       	ldi	r21, 0x41	; 65
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9c 8b       	std	Y+20, r25	; 0x14
    2aa4:	8b 8b       	std	Y+19, r24	; 0x13
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <LCD_displayCharacter+0x2b6>
    2aa8:	88 ec       	ldi	r24, 0xC8	; 200
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9a 8b       	std	Y+18, r25	; 0x12
    2aae:	89 8b       	std	Y+17, r24	; 0x11
    2ab0:	89 89       	ldd	r24, Y+17	; 0x11
    2ab2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_displayCharacter+0x2a4>
    2ab8:	9a 8b       	std	Y+18, r25	; 0x12
    2aba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	8b 89       	ldd	r24, Y+19	; 0x13
    2abe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	9c 8b       	std	Y+20, r25	; 0x14
    2ac4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <LCD_displayCharacter+0x298>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9c 8b       	std	Y+20, r25	; 0x14
    2ae2:	8b 8b       	std	Y+19, r24	; 0x13
    2ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae8:	98 8b       	std	Y+16, r25	; 0x10
    2aea:	8f 87       	std	Y+15, r24	; 0x0f
    2aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aee:	98 89       	ldd	r25, Y+16	; 0x10
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <LCD_displayCharacter+0x2e0>
    2af4:	98 8b       	std	Y+16, r25	; 0x10
    2af6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	62 e0       	ldi	r22, 0x02	; 2
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <GPIO_writePin>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e8       	ldi	r26, 0x80	; 128
    2b08:	bf e3       	ldi	r27, 0x3F	; 63
    2b0a:	8b 87       	std	Y+11, r24	; 0x0b
    2b0c:	9c 87       	std	Y+12, r25	; 0x0c
    2b0e:	ad 87       	std	Y+13, r26	; 0x0d
    2b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8f 83       	std	Y+7, r24	; 0x07
    2b2c:	98 87       	std	Y+8, r25	; 0x08
    2b2e:	a9 87       	std	Y+9, r26	; 0x09
    2b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <LCD_displayCharacter+0x3a4>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_displayCharacter+0x392>
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <LCD_displayCharacter+0x386>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc0:	78 85       	ldd	r23, Y+8	; 0x08
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_displayCharacter+0x3ce>
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2be6:	e9 96       	adiw	r28, 0x39	; 57
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <LCD_displayString+0x6>
    2bfe:	0f 92       	push	r0
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9b 83       	std	Y+3, r25	; 0x03
    2c06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c08:	19 82       	std	Y+1, r1	; 0x01
    2c0a:	0e c0       	rjmp	.+28     	; 0x2c28 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	9b 81       	ldd	r25, Y+3	; 0x03
    2c16:	fc 01       	movw	r30, r24
    2c18:	e2 0f       	add	r30, r18
    2c1a:	f3 1f       	adc	r31, r19
    2c1c:	80 81       	ld	r24, Z
    2c1e:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_displayCharacter>
		i++;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	fc 01       	movw	r30, r24
    2c34:	e2 0f       	add	r30, r18
    2c36:	f3 1f       	adc	r31, r19
    2c38:	80 81       	ld	r24, Z
    2c3a:	88 23       	and	r24, r24
    2c3c:	39 f7       	brne	.-50     	; 0x2c0c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <LCD_moveCursor+0x6>
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <LCD_moveCursor+0x8>
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	8a 83       	std	Y+2, r24	; 0x02
    2c5a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	3d 83       	std	Y+5, r19	; 0x05
    2c64:	2c 83       	std	Y+4, r18	; 0x04
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
    2c68:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6a:	81 30       	cpi	r24, 0x01	; 1
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	c1 f0       	breq	.+48     	; 0x2ca0 <LCD_moveCursor+0x56>
    2c70:	2c 81       	ldd	r18, Y+4	; 0x04
    2c72:	3d 81       	ldd	r19, Y+5	; 0x05
    2c74:	22 30       	cpi	r18, 0x02	; 2
    2c76:	31 05       	cpc	r19, r1
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <LCD_moveCursor+0x3a>
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	61 f0       	breq	.+24     	; 0x2c9a <LCD_moveCursor+0x50>
    2c82:	19 c0       	rjmp	.+50     	; 0x2cb6 <LCD_moveCursor+0x6c>
    2c84:	2c 81       	ldd	r18, Y+4	; 0x04
    2c86:	3d 81       	ldd	r19, Y+5	; 0x05
    2c88:	22 30       	cpi	r18, 0x02	; 2
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	69 f0       	breq	.+26     	; 0x2ca8 <LCD_moveCursor+0x5e>
    2c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c90:	9d 81       	ldd	r25, Y+5	; 0x05
    2c92:	83 30       	cpi	r24, 0x03	; 3
    2c94:	91 05       	cpc	r25, r1
    2c96:	61 f0       	breq	.+24     	; 0x2cb0 <LCD_moveCursor+0x66>
    2c98:	0e c0       	rjmp	.+28     	; 0x2cb6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	0b c0       	rjmp	.+22     	; 0x2cb6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	80 5c       	subi	r24, 0xC0	; 192
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	80 5f       	subi	r24, 0xF0	; 240
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	03 c0       	rjmp	.+6      	; 0x2cb6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	80 5b       	subi	r24, 0xB0	; 176
    2cb4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	80 68       	ori	r24, 0x80	; 128
    2cba:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_sendCommand>
}
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <LCD_displayStringRowColumn+0x6>
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <LCD_displayStringRowColumn+0x8>
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	6a 83       	std	Y+2, r22	; 0x02
    2cde:	5c 83       	std	Y+4, r21	; 0x04
    2ce0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ce6:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_displayString>
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	62 97       	sbiw	r28, 0x12	; 18
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	9a 8b       	std	Y+18, r25	; 0x12
    2d16:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d18:	89 89       	ldd	r24, Y+17	; 0x11
    2d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d1c:	9e 01       	movw	r18, r28
    2d1e:	2f 5f       	subi	r18, 0xFF	; 255
    2d20:	3f 4f       	sbci	r19, 0xFF	; 255
    2d22:	b9 01       	movw	r22, r18
    2d24:	4a e0       	ldi	r20, 0x0A	; 10
    2d26:	50 e0       	ldi	r21, 0x00	; 0
    2d28:	0e 94 90 18 	call	0x3120	; 0x3120 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_displayString>
}
    2d34:	62 96       	adiw	r28, 0x12	; 18
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_sendCommand>
}
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType * Config_Ptr)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <UART_init+0x6>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <UART_init+0x8>
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d6a:	1a 82       	std	Y+2, r1	; 0x02
    2d6c:	19 82       	std	Y+1, r1	; 0x01

	/*  operating-mode as required in configuration */
	if (Config_Ptr ->operating_mode ==Synch_Master){
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	87 81       	ldd	r24, Z+7	; 0x07
    2d74:	82 30       	cpi	r24, 0x02	; 2
    2d76:	41 f4       	brne	.+16     	; 0x2d88 <UART_init+0x2e>
	UCSRC = (UCSRC & 0xBF) | (1<<UMSEL);
    2d78:	a0 e4       	ldi	r26, 0x40	; 64
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e0 e4       	ldi	r30, 0x40	; 64
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	80 64       	ori	r24, 0x40	; 64
    2d84:	8c 93       	st	X, r24
    2d86:	08 c0       	rjmp	.+16     	; 0x2d98 <UART_init+0x3e>
	}else{
	UCSRA = ((Config_Ptr->operating_mode & 0x01)<<U2X);
    2d88:	ab e2       	ldi	r26, 0x2B	; 43
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d90:	87 81       	ldd	r24, Z+7	; 0x07
    2d92:	81 70       	andi	r24, 0x01	; 1
    2d94:	88 0f       	add	r24, r24
    2d96:	8c 93       	st	X, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2d98:	ea e2       	ldi	r30, 0x2A	; 42
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	88 e1       	ldi	r24, 0x18	; 24
    2d9e:	80 83       	st	Z, r24

	/*  bit-data as required in configuration */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->bit_data)>>2)<<UCSZ2);
    2da0:	aa e2       	ldi	r26, 0x2A	; 42
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	ea e2       	ldi	r30, 0x2A	; 42
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	28 2f       	mov	r18, r24
    2dac:	2b 7f       	andi	r18, 0xFB	; 251
    2dae:	eb 81       	ldd	r30, Y+3	; 0x03
    2db0:	fc 81       	ldd	r31, Y+4	; 0x04
    2db2:	84 81       	ldd	r24, Z+4	; 0x04
    2db4:	86 95       	lsr	r24
    2db6:	86 95       	lsr	r24
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	82 2b       	or	r24, r18
    2dc6:	8c 93       	st	X, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2dc8:	e0 e4       	ldi	r30, 0x40	; 64
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 e8       	ldi	r24, 0x80	; 128
    2dce:	80 83       	st	Z, r24

	/*  bit-data as required in configuration */
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data & 0x03)<<UCSZ1);
    2dd0:	a0 e4       	ldi	r26, 0x40	; 64
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e0 e4       	ldi	r30, 0x40	; 64
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	28 2f       	mov	r18, r24
    2ddc:	29 7f       	andi	r18, 0xF9	; 249
    2dde:	eb 81       	ldd	r30, Y+3	; 0x03
    2de0:	fc 81       	ldd	r31, Y+4	; 0x04
    2de2:	84 81       	ldd	r24, Z+4	; 0x04
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	83 70       	andi	r24, 0x03	; 3
    2dea:	90 70       	andi	r25, 0x00	; 0
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	82 2b       	or	r24, r18
    2df6:	8c 93       	st	X, r24

	/*  parity test as required in configuration */
	UCSRC =	(UCSRC & 0xCF) | ((Config_Ptr->parity & 0x03)<<UPM0);
    2df8:	a0 e4       	ldi	r26, 0x40	; 64
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e0 e4       	ldi	r30, 0x40	; 64
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	28 2f       	mov	r18, r24
    2e04:	2f 7c       	andi	r18, 0xCF	; 207
    2e06:	eb 81       	ldd	r30, Y+3	; 0x03
    2e08:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0a:	85 81       	ldd	r24, Z+5	; 0x05
    2e0c:	88 2f       	mov	r24, r24
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	83 70       	andi	r24, 0x03	; 3
    2e12:	90 70       	andi	r25, 0x00	; 0
    2e14:	82 95       	swap	r24
    2e16:	92 95       	swap	r25
    2e18:	90 7f       	andi	r25, 0xF0	; 240
    2e1a:	98 27       	eor	r25, r24
    2e1c:	80 7f       	andi	r24, 0xF0	; 240
    2e1e:	98 27       	eor	r25, r24
    2e20:	82 2b       	or	r24, r18
    2e22:	8c 93       	st	X, r24

	/*  stop bit as required in configuration */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit & 0x01)<<USBS);
    2e24:	a0 e4       	ldi	r26, 0x40	; 64
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e0 e4       	ldi	r30, 0x40	; 64
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	28 2f       	mov	r18, r24
    2e30:	27 7f       	andi	r18, 0xF7	; 247
    2e32:	eb 81       	ldd	r30, Y+3	; 0x03
    2e34:	fc 81       	ldd	r31, Y+4	; 0x04
    2e36:	86 81       	ldd	r24, Z+6	; 0x06
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	81 70       	andi	r24, 0x01	; 1
    2e3e:	90 70       	andi	r25, 0x00	; 0
    2e40:	88 0f       	add	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	82 2b       	or	r24, r18
    2e4e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	if((Config_Ptr -> operating_mode)==Asynch_Normal){
    2e50:	eb 81       	ldd	r30, Y+3	; 0x03
    2e52:	fc 81       	ldd	r31, Y+4	; 0x04
    2e54:	87 81       	ldd	r24, Z+7	; 0x07
    2e56:	88 23       	and	r24, r24
    2e58:	31 f5       	brne	.+76     	; 0x2ea6 <UART_init+0x14c>
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 16UL))) - 1);
    2e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	a2 81       	ldd	r26, Z+2	; 0x02
    2e64:	b3 81       	ldd	r27, Z+3	; 0x03
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	aa 1f       	adc	r26, r26
    2e6c:	bb 1f       	adc	r27, r27
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	aa 1f       	adc	r26, r26
    2e74:	bb 1f       	adc	r27, r27
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	aa 1f       	adc	r26, r26
    2e7c:	bb 1f       	adc	r27, r27
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	aa 1f       	adc	r26, r26
    2e84:	bb 1f       	adc	r27, r27
    2e86:	9c 01       	movw	r18, r24
    2e88:	ad 01       	movw	r20, r26
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	92 e1       	ldi	r25, 0x12	; 18
    2e8e:	aa e7       	ldi	r26, 0x7A	; 122
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodsi4>
    2e9a:	da 01       	movw	r26, r20
    2e9c:	c9 01       	movw	r24, r18
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	45 c0       	rjmp	.+138    	; 0x2f30 <UART_init+0x1d6>
	}

	/* Calculate the UBRR register value */
	else if((Config_Ptr -> operating_mode)==Asynch_Double){
    2ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eaa:	87 81       	ldd	r24, Z+7	; 0x07
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	11 f5       	brne	.+68     	; 0x2ef4 <UART_init+0x19a>
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	a2 81       	ldd	r26, Z+2	; 0x02
    2eba:	b3 81       	ldd	r27, Z+3	; 0x03
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	aa 1f       	adc	r26, r26
    2ec2:	bb 1f       	adc	r27, r27
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	aa 1f       	adc	r26, r26
    2eca:	bb 1f       	adc	r27, r27
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	aa 1f       	adc	r26, r26
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	9c 01       	movw	r18, r24
    2ed6:	ad 01       	movw	r20, r26
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	92 e1       	ldi	r25, 0x12	; 18
    2edc:	aa e7       	ldi	r26, 0x7A	; 122
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodsi4>
    2ee8:	da 01       	movw	r26, r20
    2eea:	c9 01       	movw	r24, r18
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	1e c0       	rjmp	.+60     	; 0x2f30 <UART_init+0x1d6>
	}

	/* Calculate the UBRR register value */
	else if((Config_Ptr -> operating_mode)==Synch_Master){
    2ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef8:	87 81       	ldd	r24, Z+7	; 0x07
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	c9 f4       	brne	.+50     	; 0x2f30 <UART_init+0x1d6>
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 2UL))) - 1);
    2efe:	eb 81       	ldd	r30, Y+3	; 0x03
    2f00:	fc 81       	ldd	r31, Y+4	; 0x04
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	a2 81       	ldd	r26, Z+2	; 0x02
    2f08:	b3 81       	ldd	r27, Z+3	; 0x03
    2f0a:	9c 01       	movw	r18, r24
    2f0c:	ad 01       	movw	r20, r26
    2f0e:	22 0f       	add	r18, r18
    2f10:	33 1f       	adc	r19, r19
    2f12:	44 1f       	adc	r20, r20
    2f14:	55 1f       	adc	r21, r21
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	92 e1       	ldi	r25, 0x12	; 18
    2f1a:	aa e7       	ldi	r26, 0x7A	; 122
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodsi4>
    2f26:	da 01       	movw	r26, r20
    2f28:	c9 01       	movw	r24, r18
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f30:	e0 e4       	ldi	r30, 0x40	; 64
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	89 2f       	mov	r24, r25
    2f3a:	99 27       	eor	r25, r25
    2f3c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f3e:	e9 e2       	ldi	r30, 0x29	; 41
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	80 83       	st	Z, r24
}
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	0f 92       	push	r0
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f60:	eb e2       	ldi	r30, 0x2B	; 43
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	80 72       	andi	r24, 0x20	; 32
    2f6c:	90 70       	andi	r25, 0x00	; 0
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	b9 f3       	breq	.-18     	; 0x2f60 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f72:	ec e2       	ldi	r30, 0x2C	; 44
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f8a:	eb e2       	ldi	r30, 0x2B	; 43
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 23       	and	r24, r24
    2f92:	dc f7       	brge	.-10     	; 0x2f8a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2f94:	ec e2       	ldi	r30, 0x2C	; 44
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(uint8 *Str, uint8 size_of_string)
{
    2fa0:	df 93       	push	r29
    2fa2:	cf 93       	push	r28
    2fa4:	00 d0       	rcall	.+0      	; 0x2fa6 <UART_sendString+0x6>
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <UART_sendString+0x8>
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	9b 83       	std	Y+3, r25	; 0x03
    2fae:	8a 83       	std	Y+2, r24	; 0x02
    2fb0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2fb2:	19 82       	std	Y+1, r1	; 0x01
    2fb4:	0e c0       	rjmp	.+28     	; 0x2fd2 <UART_sendString+0x32>

	/* Send the whole string */
	while(i < size_of_string)
	{
		UART_sendByte(Str[i]);
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	e2 0f       	add	r30, r18
    2fc4:	f3 1f       	adc	r31, r19
    2fc6:	80 81       	ld	r24, Z
    2fc8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <UART_sendByte>
		i++;
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	8f 5f       	subi	r24, 0xFF	; 255
    2fd0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(uint8 *Str, uint8 size_of_string)
{
	uint8 i = 0;

	/* Send the whole string */
	while(i < size_of_string)
    2fd2:	99 81       	ldd	r25, Y+1	; 0x01
    2fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd6:	98 17       	cp	r25, r24
    2fd8:	70 f3       	brcs	.-36     	; 0x2fb6 <UART_sendString+0x16>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <UART_receiveString+0xa>
    2ff2:	0f 92       	push	r0
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	9b 83       	std	Y+3, r25	; 0x03
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ffc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	9b 81       	ldd	r25, Y+3	; 0x03
    3008:	8c 01       	movw	r16, r24
    300a:	02 0f       	add	r16, r18
    300c:	13 1f       	adc	r17, r19
    300e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <UART_recieveByte>
    3012:	f8 01       	movw	r30, r16
    3014:	80 83       	st	Z, r24
    3016:	0f c0       	rjmp	.+30     	; 0x3036 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	9b 81       	ldd	r25, Y+3	; 0x03
    3028:	8c 01       	movw	r16, r24
    302a:	02 0f       	add	r16, r18
    302c:	13 1f       	adc	r17, r19
    302e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <UART_recieveByte>
    3032:	f8 01       	movw	r30, r16
    3034:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	83 32       	cpi	r24, 0x23	; 35
    304a:	31 f7       	brne	.-52     	; 0x3018 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	9b 81       	ldd	r25, Y+3	; 0x03
    3056:	fc 01       	movw	r30, r24
    3058:	e2 0f       	add	r30, r18
    305a:	f3 1f       	adc	r31, r19
    305c:	10 82       	st	Z, r1
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	08 95       	ret

0000306e <__udivmodsi4>:
    306e:	a1 e2       	ldi	r26, 0x21	; 33
    3070:	1a 2e       	mov	r1, r26
    3072:	aa 1b       	sub	r26, r26
    3074:	bb 1b       	sub	r27, r27
    3076:	fd 01       	movw	r30, r26
    3078:	0d c0       	rjmp	.+26     	; 0x3094 <__udivmodsi4_ep>

0000307a <__udivmodsi4_loop>:
    307a:	aa 1f       	adc	r26, r26
    307c:	bb 1f       	adc	r27, r27
    307e:	ee 1f       	adc	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	a2 17       	cp	r26, r18
    3084:	b3 07       	cpc	r27, r19
    3086:	e4 07       	cpc	r30, r20
    3088:	f5 07       	cpc	r31, r21
    308a:	20 f0       	brcs	.+8      	; 0x3094 <__udivmodsi4_ep>
    308c:	a2 1b       	sub	r26, r18
    308e:	b3 0b       	sbc	r27, r19
    3090:	e4 0b       	sbc	r30, r20
    3092:	f5 0b       	sbc	r31, r21

00003094 <__udivmodsi4_ep>:
    3094:	66 1f       	adc	r22, r22
    3096:	77 1f       	adc	r23, r23
    3098:	88 1f       	adc	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	1a 94       	dec	r1
    309e:	69 f7       	brne	.-38     	; 0x307a <__udivmodsi4_loop>
    30a0:	60 95       	com	r22
    30a2:	70 95       	com	r23
    30a4:	80 95       	com	r24
    30a6:	90 95       	com	r25
    30a8:	9b 01       	movw	r18, r22
    30aa:	ac 01       	movw	r20, r24
    30ac:	bd 01       	movw	r22, r26
    30ae:	cf 01       	movw	r24, r30
    30b0:	08 95       	ret

000030b2 <__prologue_saves__>:
    30b2:	2f 92       	push	r2
    30b4:	3f 92       	push	r3
    30b6:	4f 92       	push	r4
    30b8:	5f 92       	push	r5
    30ba:	6f 92       	push	r6
    30bc:	7f 92       	push	r7
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	ca 1b       	sub	r28, r26
    30dc:	db 0b       	sbc	r29, r27
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	09 94       	ijmp

000030ea <__epilogue_restores__>:
    30ea:	2a 88       	ldd	r2, Y+18	; 0x12
    30ec:	39 88       	ldd	r3, Y+17	; 0x11
    30ee:	48 88       	ldd	r4, Y+16	; 0x10
    30f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fc:	b9 84       	ldd	r11, Y+9	; 0x09
    30fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3100:	df 80       	ldd	r13, Y+7	; 0x07
    3102:	ee 80       	ldd	r14, Y+6	; 0x06
    3104:	fd 80       	ldd	r15, Y+5	; 0x05
    3106:	0c 81       	ldd	r16, Y+4	; 0x04
    3108:	1b 81       	ldd	r17, Y+3	; 0x03
    310a:	aa 81       	ldd	r26, Y+2	; 0x02
    310c:	b9 81       	ldd	r27, Y+1	; 0x01
    310e:	ce 0f       	add	r28, r30
    3110:	d1 1d       	adc	r29, r1
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	ed 01       	movw	r28, r26
    311e:	08 95       	ret

00003120 <itoa>:
    3120:	fb 01       	movw	r30, r22
    3122:	9f 01       	movw	r18, r30
    3124:	e8 94       	clt
    3126:	42 30       	cpi	r20, 0x02	; 2
    3128:	c4 f0       	brlt	.+48     	; 0x315a <itoa+0x3a>
    312a:	45 32       	cpi	r20, 0x25	; 37
    312c:	b4 f4       	brge	.+44     	; 0x315a <itoa+0x3a>
    312e:	4a 30       	cpi	r20, 0x0A	; 10
    3130:	29 f4       	brne	.+10     	; 0x313c <itoa+0x1c>
    3132:	97 fb       	bst	r25, 7
    3134:	1e f4       	brtc	.+6      	; 0x313c <itoa+0x1c>
    3136:	90 95       	com	r25
    3138:	81 95       	neg	r24
    313a:	9f 4f       	sbci	r25, 0xFF	; 255
    313c:	64 2f       	mov	r22, r20
    313e:	77 27       	eor	r23, r23
    3140:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodhi4>
    3144:	80 5d       	subi	r24, 0xD0	; 208
    3146:	8a 33       	cpi	r24, 0x3A	; 58
    3148:	0c f0       	brlt	.+2      	; 0x314c <itoa+0x2c>
    314a:	89 5d       	subi	r24, 0xD9	; 217
    314c:	81 93       	st	Z+, r24
    314e:	cb 01       	movw	r24, r22
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	a1 f7       	brne	.-24     	; 0x313c <itoa+0x1c>
    3154:	16 f4       	brtc	.+4      	; 0x315a <itoa+0x3a>
    3156:	5d e2       	ldi	r21, 0x2D	; 45
    3158:	51 93       	st	Z+, r21
    315a:	10 82       	st	Z, r1
    315c:	c9 01       	movw	r24, r18
    315e:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <strrev>

00003162 <strrev>:
    3162:	dc 01       	movw	r26, r24
    3164:	fc 01       	movw	r30, r24
    3166:	67 2f       	mov	r22, r23
    3168:	71 91       	ld	r23, Z+
    316a:	77 23       	and	r23, r23
    316c:	e1 f7       	brne	.-8      	; 0x3166 <strrev+0x4>
    316e:	32 97       	sbiw	r30, 0x02	; 2
    3170:	04 c0       	rjmp	.+8      	; 0x317a <strrev+0x18>
    3172:	7c 91       	ld	r23, X
    3174:	6d 93       	st	X+, r22
    3176:	70 83       	st	Z, r23
    3178:	62 91       	ld	r22, -Z
    317a:	ae 17       	cp	r26, r30
    317c:	bf 07       	cpc	r27, r31
    317e:	c8 f3       	brcs	.-14     	; 0x3172 <strrev+0x10>
    3180:	08 95       	ret

00003182 <__udivmodhi4>:
    3182:	aa 1b       	sub	r26, r26
    3184:	bb 1b       	sub	r27, r27
    3186:	51 e1       	ldi	r21, 0x11	; 17
    3188:	07 c0       	rjmp	.+14     	; 0x3198 <__udivmodhi4_ep>

0000318a <__udivmodhi4_loop>:
    318a:	aa 1f       	adc	r26, r26
    318c:	bb 1f       	adc	r27, r27
    318e:	a6 17       	cp	r26, r22
    3190:	b7 07       	cpc	r27, r23
    3192:	10 f0       	brcs	.+4      	; 0x3198 <__udivmodhi4_ep>
    3194:	a6 1b       	sub	r26, r22
    3196:	b7 0b       	sbc	r27, r23

00003198 <__udivmodhi4_ep>:
    3198:	88 1f       	adc	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	5a 95       	dec	r21
    319e:	a9 f7       	brne	.-22     	; 0x318a <__udivmodhi4_loop>
    31a0:	80 95       	com	r24
    31a2:	90 95       	com	r25
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	08 95       	ret

000031aa <_exit>:
    31aa:	f8 94       	cli

000031ac <__stop_program>:
    31ac:	ff cf       	rjmp	.-2      	; 0x31ac <__stop_program>
