
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000249c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  0000249c  00002530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080019c  0080019c  0000266c  2**0
                  ALLOC
  3 .stab         00002754  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f7  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000062b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00006417  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  000065cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  000084da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  000095ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000a75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000aa42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__vector_7>
      20:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_8>
      24:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 0b 	call	0x1692	; 0x1692 <main>
      8a:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 12 	jmp	0x242a	; 0x242a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 12 	jmp	0x242a	; 0x242a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 25 12 	jmp	0x244a	; 0x244a <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <DcMotor_Init>:
/*
 * Description:
 * 1) setup the direction for the two motor pins through the GPIO driver.
 * 2) Stop the motor at the beginning
 */
void DcMotor_Init(void){
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62

	/*Setup the two motor pins as output pins*/
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	41 e0       	ldi	r20, 0x01	; 1
     d7c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	0e 94 9b 0c 	call	0x1936	; 0x1936 <GPIO_setupPinDirection>

	/*Motor is stopped at the beginning*/
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <DcMotor_Rotate>:
/*
 * Description:
 * 1) setup the state (ON or OFF) of the motor
 * 2) Control the speed of the motor 0->100% from its max speed by sending to PWM driver
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <DcMotor_Rotate+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	6a 83       	std	Y+2, r22	; 0x02
	/* Produce PWM signal according to the speed */
	PWM_Timer0_Start(speed);
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	0e 94 0a 07 	call	0xe14	; 0xe14 <PWM_Timer0_Start>
	if (state==DC_MOTOR_ACW){
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	59 f4       	brne	.+22     	; 0xdd4 <DcMotor_Rotate+0x30>
		//ROTATE CW
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <DcMotor_Rotate+0x66>

	}
	else if (state==DC_MOTOR_CW){
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	59 f4       	brne	.+22     	; 0xdf0 <DcMotor_Rotate+0x4c>
		//ROTATE CW
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	41 e0       	ldi	r20, 0x01	; 1
     de0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <DcMotor_Rotate+0x66>

	}
	else if (state==DC_MOTOR_OFF){
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 23       	and	r24, r24
     df4:	51 f4       	brne	.+20     	; 0xe0a <DcMotor_Rotate+0x66>
		//ROTATE CW
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>

	}
	else{
		/* Do nothing*/
	}
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <PWM_Timer0_Start>:
 *******************************************************************************/
#include "avr/io.h" /* To use TIMER 0 Registers */
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	0f 92       	push	r0
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
     e24:	e2 e5       	ldi	r30, 0x52	; 82
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	10 82       	st	Z, r1

	OCR0  = ( (float)duty_cycle/100 ) * 255; //Set Compare value
     e2a:	0c e5       	ldi	r16, 0x5C	; 92
     e2c:	10 e0       	ldi	r17, 0x00	; 0
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	48 ec       	ldi	r20, 0xC8	; 200
     e4e:	52 e4       	ldi	r21, 0x42	; 66
     e50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	f8 01       	movw	r30, r16
     e7a:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     e7c:	a7 e3       	ldi	r26, 0x37	; 55
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e3       	ldi	r30, 0x37	; 55
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 60       	ori	r24, 0x08	; 8
     e88:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     e8a:	e3 e5       	ldi	r30, 0x53	; 83
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8a e6       	ldi	r24, 0x6A	; 106
     e90:	80 83       	st	Z, r24


}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect) {
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	if (g1_callBackPtr != NULL_PTR) {
     ec8:	80 91 9c 01 	lds	r24, 0x019C
     ecc:	90 91 9d 01 	lds	r25, 0x019D
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	49 f0       	breq	.+18     	; 0xee6 <__vector_9+0x48>
		/* Call the Call Back function in the application after the edge is detected */
		(*g1_callBackPtr)(second_1); /* another method to call the function using pointer to function g_callBackPtr(); */
     ed4:	e0 91 9c 01 	lds	r30, 0x019C
     ed8:	f0 91 9d 01 	lds	r31, 0x019D
     edc:	80 91 a0 01 	lds	r24, 0x01A0
     ee0:	90 91 a1 01 	lds	r25, 0x01A1
     ee4:	09 95       	icall
	}
}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <__vector_7>:

ISR(TIMER1_COMPA_vect) {
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	2f 93       	push	r18
     f18:	3f 93       	push	r19
     f1a:	4f 93       	push	r20
     f1c:	5f 93       	push	r21
     f1e:	6f 93       	push	r22
     f20:	7f 93       	push	r23
     f22:	8f 93       	push	r24
     f24:	9f 93       	push	r25
     f26:	af 93       	push	r26
     f28:	bf 93       	push	r27
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	if (g1_callBackPtr != NULL_PTR) {
     f36:	80 91 9c 01 	lds	r24, 0x019C
     f3a:	90 91 9d 01 	lds	r25, 0x019D
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	49 f0       	breq	.+18     	; 0xf54 <__vector_7+0x48>
		/* Call the Call Back function in the application after the edge is detected */
		(*g1_callBackPtr)(second_1); /* another method to call the function using pointer to function g_callBackPtr(); */
     f42:	e0 91 9c 01 	lds	r30, 0x019C
     f46:	f0 91 9d 01 	lds	r31, 0x019D
     f4a:	80 91 a0 01 	lds	r24, 0x01A0
     f4e:	90 91 a1 01 	lds	r25, 0x01A1
     f52:	09 95       	icall
	}
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_8>:

ISR(TIMER1_COMPB_vect) {
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	if (g1_callBackPtr != NULL_PTR) {
     fa4:	80 91 9c 01 	lds	r24, 0x019C
     fa8:	90 91 9d 01 	lds	r25, 0x019D
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	49 f0       	breq	.+18     	; 0xfc2 <__vector_8+0x48>
		/* Call the Call Back function in the application after the edge is detected */
		(*g1_callBackPtr)(second_1); /* another method to call the function using pointer to function g_callBackPtr(); */
     fb0:	e0 91 9c 01 	lds	r30, 0x019C
     fb4:	f0 91 9d 01 	lds	r31, 0x019D
     fb8:	80 91 a0 01 	lds	r24, 0x01A0
     fbc:	90 91 a1 01 	lds	r25, 0x01A1
     fc0:	09 95       	icall
	}
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <Timer1_init>:

/*
 * Description:
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <Timer1_init+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <Timer1_init+0x8>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01

	/*  timer1 mood as required in configuration */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->mode & 0x03));
     ff8:	af e4       	ldi	r26, 0x4F	; 79
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ef e4       	ldi	r30, 0x4F	; 79
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	98 2f       	mov	r25, r24
    1004:	9c 7f       	andi	r25, 0xFC	; 252
    1006:	e9 81       	ldd	r30, Y+1	; 0x01
    1008:	fa 81       	ldd	r31, Y+2	; 0x02
    100a:	83 81       	ldd	r24, Z+3	; 0x03
    100c:	83 70       	andi	r24, 0x03	; 3
    100e:	89 2b       	or	r24, r25
    1010:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->mode & 0x0C) << 1);
    1012:	ae e4       	ldi	r26, 0x4E	; 78
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ee e4       	ldi	r30, 0x4E	; 78
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	28 2f       	mov	r18, r24
    101e:	27 7e       	andi	r18, 0xE7	; 231
    1020:	e9 81       	ldd	r30, Y+1	; 0x01
    1022:	fa 81       	ldd	r31, Y+2	; 0x02
    1024:	83 81       	ldd	r24, Z+3	; 0x03
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	8c 70       	andi	r24, 0x0C	; 12
    102c:	90 70       	andi	r25, 0x00	; 0
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	82 2b       	or	r24, r18
    1034:	8c 93       	st	X, r24

	/*  timer1 Compare as required in configuration */
	TCCR1A = (TCCR1A & 0x3F) | ((Config_Ptr->a_compare_mode)<<6);
    1036:	af e4       	ldi	r26, 0x4F	; 79
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ef e4       	ldi	r30, 0x4F	; 79
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	28 2f       	mov	r18, r24
    1042:	2f 73       	andi	r18, 0x3F	; 63
    1044:	e9 81       	ldd	r30, Y+1	; 0x01
    1046:	fa 81       	ldd	r31, Y+2	; 0x02
    1048:	81 85       	ldd	r24, Z+9	; 0x09
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	00 24       	eor	r0, r0
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	07 94       	ror	r0
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	07 94       	ror	r0
    105c:	98 2f       	mov	r25, r24
    105e:	80 2d       	mov	r24, r0
    1060:	82 2b       	or	r24, r18
    1062:	8c 93       	st	X, r24
	TCCR1A = (TCCR1A & 0xCF) | ((Config_Ptr->b_compare_mode)<<4);
    1064:	af e4       	ldi	r26, 0x4F	; 79
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ef e4       	ldi	r30, 0x4F	; 79
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	28 2f       	mov	r18, r24
    1070:	2f 7c       	andi	r18, 0xCF	; 207
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	82 85       	ldd	r24, Z+10	; 0x0a
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	82 95       	swap	r24
    107e:	92 95       	swap	r25
    1080:	90 7f       	andi	r25, 0xF0	; 240
    1082:	98 27       	eor	r25, r24
    1084:	80 7f       	andi	r24, 0xF0	; 240
    1086:	98 27       	eor	r25, r24
    1088:	82 2b       	or	r24, r18
    108a:	8c 93       	st	X, r24

	/*  timer1 prescaler as required in configuration */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->prescaler));
    108c:	ae e4       	ldi	r26, 0x4E	; 78
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ee e4       	ldi	r30, 0x4E	; 78
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	98 2f       	mov	r25, r24
    1098:	98 7f       	andi	r25, 0xF8	; 248
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	89 2b       	or	r24, r25
    10a2:	8c 93       	st	X, r24

	/*  timer1 initial value as required in configuration */
	TCNT1 = ((Config_Ptr->initial_value));
    10a4:	ac e4       	ldi	r26, 0x4C	; 76
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	fa 81       	ldd	r31, Y+2	; 0x02
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	11 96       	adiw	r26, 0x01	; 1
    10b2:	9c 93       	st	X, r25
    10b4:	8e 93       	st	-X, r24

	/*NON PWM*/
	SET_BIT(TCCR1A,FOC1A);
    10b6:	af e4       	ldi	r26, 0x4F	; 79
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 60       	ori	r24, 0x08	; 8
    10c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    10c4:	af e4       	ldi	r26, 0x4F	; 79
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ef e4       	ldi	r30, 0x4F	; 79
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	84 60       	ori	r24, 0x04	; 4
    10d0:	8c 93       	st	X, r24

	/*  timer1 enable  as required in configuration */
	if((Config_Ptr->mode == CMP_1) | (Config_Ptr->mode == CMP_2)){
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	83 81       	ldd	r24, Z+3	; 0x03
    10d8:	1c 82       	std	Y+4, r1	; 0x04
    10da:	84 30       	cpi	r24, 0x04	; 4
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <Timer1_init+0xfa>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	8c 83       	std	Y+4, r24	; 0x04
    10e2:	e9 81       	ldd	r30, Y+1	; 0x01
    10e4:	fa 81       	ldd	r31, Y+2	; 0x02
    10e6:	83 81       	ldd	r24, Z+3	; 0x03
    10e8:	1b 82       	std	Y+3, r1	; 0x03
    10ea:	8c 30       	cpi	r24, 0x0C	; 12
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <Timer1_init+0x10a>
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	9b 83       	std	Y+3, r25	; 0x03
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	89 2b       	or	r24, r25
    10f8:	88 23       	and	r24, r24
    10fa:	39 f1       	breq	.+78     	; 0x114a <Timer1_init+0x162>
		if ((Config_Ptr->channel)==Channel_A){
    10fc:	e9 81       	ldd	r30, Y+1	; 0x01
    10fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1100:	80 85       	ldd	r24, Z+8	; 0x08
    1102:	88 23       	and	r24, r24
    1104:	89 f4       	brne	.+34     	; 0x1128 <Timer1_init+0x140>
			TIMSK |= (1 << OCIE1A);
    1106:	a9 e5       	ldi	r26, 0x59	; 89
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e9 e5       	ldi	r30, 0x59	; 89
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 61       	ori	r24, 0x10	; 16
    1112:	8c 93       	st	X, r24
			/*  timer1 first compare value as required in configuration */
			OCR1A =  (Config_Ptr->a_compare_value);
    1114:	aa e4       	ldi	r26, 0x4A	; 74
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	84 81       	ldd	r24, Z+4	; 0x04
    111e:	95 81       	ldd	r25, Z+5	; 0x05
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	9c 93       	st	X, r25
    1124:	8e 93       	st	-X, r24
    1126:	18 c0       	rjmp	.+48     	; 0x1158 <Timer1_init+0x170>
		}
		else
		{
			TIMSK |= (1 << OCIE1B);
    1128:	a9 e5       	ldi	r26, 0x59	; 89
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e9 e5       	ldi	r30, 0x59	; 89
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	88 60       	ori	r24, 0x08	; 8
    1134:	8c 93       	st	X, r24
			/*  timer1 first compare value as required in configuration */
			OCR1B =  (Config_Ptr->b_compare_value);
    1136:	a8 e4       	ldi	r26, 0x48	; 72
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e9 81       	ldd	r30, Y+1	; 0x01
    113c:	fa 81       	ldd	r31, Y+2	; 0x02
    113e:	86 81       	ldd	r24, Z+6	; 0x06
    1140:	97 81       	ldd	r25, Z+7	; 0x07
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <Timer1_init+0x170>
		}
	}
	else {
		TIMSK |= (1 << TOIE1)| (1<<TICIE1);
    114a:	a9 e5       	ldi	r26, 0x59	; 89
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e9 e5       	ldi	r30, 0x59	; 89
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	84 62       	ori	r24, 0x24	; 36
    1156:	8c 93       	st	X, r24
	}
	SREG |= (1 << 7); //Enable global interrupts in MC by setting the I-Bit.
    1158:	af e5       	ldi	r26, 0x5F	; 95
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ef e5       	ldi	r30, 0x5F	; 95
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 68       	ori	r24, 0x80	; 128
    1164:	8c 93       	st	X, r24
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <Timer1_deInit>:

/*
 * Description :
 * Function to De-initialize Timer1.
 */
void Timer1_deInit(void){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	10 82       	st	Z, r1
	TCCR1B = 0;
    1182:	ee e4       	ldi	r30, 0x4E	; 78
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	10 82       	st	Z, r1
	TCNT1 = 0;
    1188:	ec e4       	ldi	r30, 0x4C	; 76
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	11 82       	std	Z+1, r1	; 0x01
    118e:	10 82       	st	Z, r1
	OCR1A = 0;
    1190:	ea e4       	ldi	r30, 0x4A	; 74
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	11 82       	std	Z+1, r1	; 0x01
    1196:	10 82       	st	Z, r1
	OCR1B = 0;
    1198:	e8 e4       	ldi	r30, 0x48	; 72
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	11 82       	std	Z+1, r1	; 0x01
    119e:	10 82       	st	Z, r1
	ICR1 = 0;
    11a0:	e6 e4       	ldi	r30, 0x46	; 70
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	11 82       	std	Z+1, r1	; 0x01
    11a6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1 << OCIE1B) & ~(1 << TOIE1) & ~(1 << TICIE1) & ~(1 << OCIE1A);
    11a8:	a9 e5       	ldi	r26, 0x59	; 89
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e9 e5       	ldi	r30, 0x59	; 89
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	83 7c       	andi	r24, 0xC3	; 195
    11b4:	8c 93       	st	X, r24
}
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer1_setCallBack>:

/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void (*a_ptr)(uint16)) {
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <Timer1_setCallBack+0x6>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g1_callBackPtr = a_ptr;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	90 93 9d 01 	sts	0x019D, r25
    11d2:	80 93 9c 01 	sts	0x019C, r24
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <app_init>:
/*
 * Description :
 * Function to initialize UART,EEPROM,DC-Motor and Buzzer.
 */
void app_init (void)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2d 97       	sbiw	r28, 0x0d	; 13
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config = {9600,bits_8,DISABLED,ONE,Asynch_Double};
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	9a 87       	std	Y+10, r25	; 0x0a
    11fa:	89 87       	std	Y+9, r24	; 0x09
    11fc:	e8 e6       	ldi	r30, 0x68	; 104
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	fc 87       	std	Y+12, r31	; 0x0c
    1202:	eb 87       	std	Y+11, r30	; 0x0b
    1204:	f8 e0       	ldi	r31, 0x08	; 8
    1206:	fd 87       	std	Y+13, r31	; 0x0d
    1208:	eb 85       	ldd	r30, Y+11	; 0x0b
    120a:	fc 85       	ldd	r31, Y+12	; 0x0c
    120c:	00 80       	ld	r0, Z
    120e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1210:	9c 85       	ldd	r25, Y+12	; 0x0c
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	9c 87       	std	Y+12, r25	; 0x0c
    1216:	8b 87       	std	Y+11, r24	; 0x0b
    1218:	e9 85       	ldd	r30, Y+9	; 0x09
    121a:	fa 85       	ldd	r31, Y+10	; 0x0a
    121c:	00 82       	st	Z, r0
    121e:	89 85       	ldd	r24, Y+9	; 0x09
    1220:	9a 85       	ldd	r25, Y+10	; 0x0a
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	9a 87       	std	Y+10, r25	; 0x0a
    1226:	89 87       	std	Y+9, r24	; 0x09
    1228:	9d 85       	ldd	r25, Y+13	; 0x0d
    122a:	91 50       	subi	r25, 0x01	; 1
    122c:	9d 87       	std	Y+13, r25	; 0x0d
    122e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1230:	ee 23       	and	r30, r30
    1232:	51 f7       	brne	.-44     	; 0x1208 <app_init+0x28>

	/* Initialize ICU driver */
	UART_init(&UART_Config);
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 69 10 	call	0x20d2	; 0x20d2 <UART_init>

	EEPROM_init();
    123c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <EEPROM_init>

	DcMotor_Init();
    1240:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DcMotor_Init>

	Buzzer_init();
    1244:	0e 94 20 0b 	call	0x1640	; 0x1640 <Buzzer_init>

}
    1248:	2d 96       	adiw	r28, 0x0d	; 13
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <receive_pass>:
/*
 * Description :
 * Function to receive password.
 */
void receive_pass(void)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	/* Receive the pressed key from MC1 through UART */
	UART_receiveString(pass_recieved);
    1262:	8b ea       	ldi	r24, 0xAB	; 171
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_receiveString>
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <send_command>:
/*
 * Description :
 * Function to send command.
 */
void send_command(const uint8 data)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	0f 92       	push	r0
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(data);
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_sendByte>
}
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <write_pass>:
/*
 * Description :
 * Function to store password in EEPROM.
 */
void write_pass (void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	61 97       	sbiw	r28, 0x11	; 17
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    129e:	ce 01       	movw	r24, r28
    12a0:	02 96       	adiw	r24, 0x02	; 2
    12a2:	9e 87       	std	Y+14, r25	; 0x0e
    12a4:	8d 87       	std	Y+13, r24	; 0x0d
    12a6:	e0 e7       	ldi	r30, 0x70	; 112
    12a8:	f1 e0       	ldi	r31, 0x01	; 1
    12aa:	f8 8b       	std	Y+16, r31	; 0x10
    12ac:	ef 87       	std	Y+15, r30	; 0x0f
    12ae:	fb e0       	ldi	r31, 0x0B	; 11
    12b0:	f9 8b       	std	Y+17, r31	; 0x11
    12b2:	ef 85       	ldd	r30, Y+15	; 0x0f
    12b4:	f8 89       	ldd	r31, Y+16	; 0x10
    12b6:	00 80       	ld	r0, Z
    12b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ba:	98 89       	ldd	r25, Y+16	; 0x10
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
    12c2:	ed 85       	ldd	r30, Y+13	; 0x0d
    12c4:	fe 85       	ldd	r31, Y+14	; 0x0e
    12c6:	00 82       	st	Z, r0
    12c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	9e 87       	std	Y+14, r25	; 0x0e
    12d0:	8d 87       	std	Y+13, r24	; 0x0d
    12d2:	99 89       	ldd	r25, Y+17	; 0x11
    12d4:	91 50       	subi	r25, 0x01	; 1
    12d6:	99 8b       	std	Y+17, r25	; 0x11
    12d8:	e9 89       	ldd	r30, Y+17	; 0x11
    12da:	ee 23       	and	r30, r30
    12dc:	51 f7       	brne	.-44     	; 0x12b2 <write_pass+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    12de:	ce 01       	movw	r24, r28
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    12e6:	8f ed       	ldi	r24, 0xDF	; 223
    12e8:	9a e0       	ldi	r25, 0x0A	; 10
    12ea:	0e 94 de 08 	call	0x11bc	; 0x11bc <Timer1_setCallBack>

	uint8 x = 0;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	2a c0       	rjmp	.+84     	; 0x1346 <write_pass+0xbc>
	while (x<6){
		EEPROM_writeByte(EEPROM_PASSWORD_ADDRESS+x,pass_recieved[x]);
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	82 96       	adiw	r24, 0x22	; 34
    12fa:	ac 01       	movw	r20, r24
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	fc 01       	movw	r30, r24
    1304:	e5 55       	subi	r30, 0x55	; 85
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	20 81       	ld	r18, Z
    130a:	ca 01       	movw	r24, r20
    130c:	62 2f       	mov	r22, r18
    130e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <EEPROM_writeByte>
		Timer1_Delay(20); /* Delay between every operation on EEPROM */
    1312:	84 e1       	ldi	r24, 0x14	; 20
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

		EEPROM_readByte(EEPROM_PASSWORD_ADDRESS+x,&eeprom_pass[x]);
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	82 96       	adiw	r24, 0x22	; 34
    1322:	ac 01       	movw	r20, r24
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 01       	movw	r18, r24
    132c:	2c 55       	subi	r18, 0x5C	; 92
    132e:	3e 4f       	sbci	r19, 0xFE	; 254
    1330:	ca 01       	movw	r24, r20
    1332:	b9 01       	movw	r22, r18
    1334:	0e 94 3b 0c 	call	0x1876	; 0x1876 <EEPROM_readByte>
		Timer1_Delay(20); /* Delay between every operation on EEPROM */
    1338:	84 e1       	ldi	r24, 0x14	; 20
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

		x++;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */

	Timer1_setCallBack(TIMER1_countProcessing);

	uint8 x = 0;
	while (x<6){
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	86 30       	cpi	r24, 0x06	; 6
    134a:	98 f2       	brcs	.-90     	; 0x12f2 <write_pass+0x68>
		EEPROM_readByte(EEPROM_PASSWORD_ADDRESS+x,&eeprom_pass[x]);
		Timer1_Delay(20); /* Delay between every operation on EEPROM */

		x++;
	}
	Timer1_deInit();
    134c:	0e 94 ba 08 	call	0x1174	; 0x1174 <Timer1_deInit>
}
    1350:	61 96       	adiw	r28, 0x11	; 17
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <check_pass_exist>:
/*
 * Description :
 * Function to check if there is a password stored in EEPROM or not.
 */
uint8 check_pass_exist (void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	63 97       	sbiw	r28, 0x13	; 19
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_8,CMP_1,1000,0,Channel_A,Normal_compare,Normal_compare};
    1376:	ce 01       	movw	r24, r28
    1378:	04 96       	adiw	r24, 0x04	; 4
    137a:	98 8b       	std	Y+16, r25	; 0x10
    137c:	8f 87       	std	Y+15, r24	; 0x0f
    137e:	eb e7       	ldi	r30, 0x7B	; 123
    1380:	f1 e0       	ldi	r31, 0x01	; 1
    1382:	fa 8b       	std	Y+18, r31	; 0x12
    1384:	e9 8b       	std	Y+17, r30	; 0x11
    1386:	fb e0       	ldi	r31, 0x0B	; 11
    1388:	fb 8b       	std	Y+19, r31	; 0x13
    138a:	e9 89       	ldd	r30, Y+17	; 0x11
    138c:	fa 89       	ldd	r31, Y+18	; 0x12
    138e:	00 80       	ld	r0, Z
    1390:	89 89       	ldd	r24, Y+17	; 0x11
    1392:	9a 89       	ldd	r25, Y+18	; 0x12
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	9a 8b       	std	Y+18, r25	; 0x12
    1398:	89 8b       	std	Y+17, r24	; 0x11
    139a:	ef 85       	ldd	r30, Y+15	; 0x0f
    139c:	f8 89       	ldd	r31, Y+16	; 0x10
    139e:	00 82       	st	Z, r0
    13a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a2:	98 89       	ldd	r25, Y+16	; 0x10
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	98 8b       	std	Y+16, r25	; 0x10
    13a8:	8f 87       	std	Y+15, r24	; 0x0f
    13aa:	9b 89       	ldd	r25, Y+19	; 0x13
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	9b 8b       	std	Y+19, r25	; 0x13
    13b0:	eb 89       	ldd	r30, Y+19	; 0x13
    13b2:	ee 23       	and	r30, r30
    13b4:	51 f7       	brne	.-44     	; 0x138a <check_pass_exist+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    13b6:	ce 01       	movw	r24, r28
    13b8:	04 96       	adiw	r24, 0x04	; 4
    13ba:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    13be:	8f ed       	ldi	r24, 0xDF	; 223
    13c0:	9a e0       	ldi	r25, 0x0A	; 10
    13c2:	0e 94 de 08 	call	0x11bc	; 0x11bc <Timer1_setCallBack>

	int x=0;
    13c6:	1b 82       	std	Y+3, r1	; 0x03
    13c8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 found = 0;
    13ca:	19 82       	std	Y+1, r1	; 0x01
    13cc:	16 c0       	rjmp	.+44     	; 0x13fa <check_pass_exist+0x98>
	while (x<6){
		EEPROM_readByte(EEPROM_PASSWORD_ADDRESS+x,&eeprom_pass[x]);
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	82 96       	adiw	r24, 0x22	; 34
    13d4:	ac 01       	movw	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	9c 01       	movw	r18, r24
    13dc:	2c 55       	subi	r18, 0x5C	; 92
    13de:	3e 4f       	sbci	r19, 0xFE	; 254
    13e0:	ca 01       	movw	r24, r20
    13e2:	b9 01       	movw	r22, r18
    13e4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <EEPROM_readByte>
		Timer1_Delay(20); /* Delay between every operation on EEPROM */
    13e8:	84 e1       	ldi	r24, 0x14	; 20
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

		x++;
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_setCallBack(TIMER1_countProcessing);

	int x=0;
	uint8 found = 0;
	while (x<6){
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	86 30       	cpi	r24, 0x06	; 6
    1400:	91 05       	cpc	r25, r1
    1402:	2c f3       	brlt	.-54     	; 0x13ce <check_pass_exist+0x6c>
		Timer1_Delay(20); /* Delay between every operation on EEPROM */

		x++;
	}

	if (eeprom_pass[5]=='#')
    1404:	80 91 a9 01 	lds	r24, 0x01A9
    1408:	83 32       	cpi	r24, 0x23	; 35
    140a:	11 f4       	brne	.+4      	; 0x1410 <check_pass_exist+0xae>
	{
		found ='y';
    140c:	89 e7       	ldi	r24, 0x79	; 121
    140e:	89 83       	std	Y+1, r24	; 0x01
	}
	Timer1_deInit();
    1410:	0e 94 ba 08 	call	0x1174	; 0x1174 <Timer1_deInit>
	return found;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
}
    1416:	63 96       	adiw	r28, 0x13	; 19
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <check_pass_correct>:
/*
 * Description :
 * Function to check if password entered by user is the same stored in EEPROM.
 */
uint8 check_pass_correct (void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <check_pass_correct+0x6>
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	int i=0;
    1434:	1b 82       	std	Y+3, r1	; 0x03
    1436:	1a 82       	std	Y+2, r1	; 0x02
	uint8 correct = 0;
    1438:	19 82       	std	Y+1, r1	; 0x01
    143a:	17 c0       	rjmp	.+46     	; 0x146a <check_pass_correct+0x42>
	while (i<5)
	{
		if (pass_recieved[i]!=eeprom_pass[i])
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	fc 01       	movw	r30, r24
    1442:	e5 55       	subi	r30, 0x55	; 85
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	20 81       	ld	r18, Z
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	fc 01       	movw	r30, r24
    144e:	ec 55       	subi	r30, 0x5C	; 92
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	80 81       	ld	r24, Z
    1454:	28 17       	cp	r18, r24
    1456:	11 f0       	breq	.+4      	; 0x145c <check_pass_correct+0x34>
		{
			correct = 0;
    1458:	19 82       	std	Y+1, r1	; 0x01
    145a:	0c c0       	rjmp	.+24     	; 0x1474 <check_pass_correct+0x4c>
			break;
		}
		correct ='y';
    145c:	89 e7       	ldi	r24, 0x79	; 121
    145e:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	9b 81       	ldd	r25, Y+3	; 0x03
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8 check_pass_correct (void)
{
	int i=0;
	uint8 correct = 0;
	while (i<5)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	85 30       	cpi	r24, 0x05	; 5
    1470:	91 05       	cpc	r25, r1
    1472:	24 f3       	brlt	.-56     	; 0x143c <check_pass_correct+0x14>
			break;
		}
		correct ='y';
		i++;
	}
	return correct;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <motor_operate>:
/*
 * Description :
 * Function to open and close the door
 */
void motor_operate (void)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	60 97       	sbiw	r28, 0x10	; 16
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_1024,CMP_1,7812,0,Channel_A,Normal_compare,Normal_compare};
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	9d 87       	std	Y+13, r25	; 0x0d
    149c:	8c 87       	std	Y+12, r24	; 0x0c
    149e:	e6 e8       	ldi	r30, 0x86	; 134
    14a0:	f1 e0       	ldi	r31, 0x01	; 1
    14a2:	ff 87       	std	Y+15, r31	; 0x0f
    14a4:	ee 87       	std	Y+14, r30	; 0x0e
    14a6:	fb e0       	ldi	r31, 0x0B	; 11
    14a8:	f8 8b       	std	Y+16, r31	; 0x10
    14aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    14ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ae:	00 80       	ld	r0, Z
    14b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	9f 87       	std	Y+15, r25	; 0x0f
    14b8:	8e 87       	std	Y+14, r24	; 0x0e
    14ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    14bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    14be:	00 82       	st	Z, r0
    14c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	9d 87       	std	Y+13, r25	; 0x0d
    14c8:	8c 87       	std	Y+12, r24	; 0x0c
    14ca:	98 89       	ldd	r25, Y+16	; 0x10
    14cc:	91 50       	subi	r25, 0x01	; 1
    14ce:	98 8b       	std	Y+16, r25	; 0x10
    14d0:	e8 89       	ldd	r30, Y+16	; 0x10
    14d2:	ee 23       	and	r30, r30
    14d4:	51 f7       	brne	.-44     	; 0x14aa <motor_operate+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    14d6:	ce 01       	movw	r24, r28
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    14de:	8f ed       	ldi	r24, 0xDF	; 223
    14e0:	9a e0       	ldi	r25, 0x0A	; 10
    14e2:	0e 94 de 08 	call	0x11bc	; 0x11bc <Timer1_setCallBack>

	DcMotor_Rotate(DC_MOTOR_CW,100);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	64 e6       	ldi	r22, 0x64	; 100
    14ea:	0e 94 d2 06 	call	0xda4	; 0xda4 <DcMotor_Rotate>

	Timer1_Delay (15);
    14ee:	8f e0       	ldi	r24, 0x0F	; 15
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

	DcMotor_Rotate(DC_MOTOR_OFF,0);
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	0e 94 d2 06 	call	0xda4	; 0xda4 <DcMotor_Rotate>

	Timer1_Delay (3);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

	DcMotor_Rotate(DC_MOTOR_ACW,100);
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	64 e6       	ldi	r22, 0x64	; 100
    150a:	0e 94 d2 06 	call	0xda4	; 0xda4 <DcMotor_Rotate>

	Timer1_Delay (15);
    150e:	8f e0       	ldi	r24, 0x0F	; 15
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

	DcMotor_Rotate(DC_MOTOR_OFF,0);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	0e 94 d2 06 	call	0xda4	; 0xda4 <DcMotor_Rotate>

	Timer1_deInit();
    151e:	0e 94 ba 08 	call	0x1174	; 0x1174 <Timer1_deInit>
}
    1522:	60 96       	adiw	r28, 0x10	; 16
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <buzzer_operate>:
/*
 * Description :
 * Function to start buzzer.
 */
void buzzer_operate (void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	60 97       	sbiw	r28, 0x10	; 16
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER1_Config = {0,F_CPU_1024,CMP_1,7812,0,Channel_A,Normal_compare,Normal_compare};
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	9d 87       	std	Y+13, r25	; 0x0d
    154e:	8c 87       	std	Y+12, r24	; 0x0c
    1550:	e1 e9       	ldi	r30, 0x91	; 145
    1552:	f1 e0       	ldi	r31, 0x01	; 1
    1554:	ff 87       	std	Y+15, r31	; 0x0f
    1556:	ee 87       	std	Y+14, r30	; 0x0e
    1558:	fb e0       	ldi	r31, 0x0B	; 11
    155a:	f8 8b       	std	Y+16, r31	; 0x10
    155c:	ee 85       	ldd	r30, Y+14	; 0x0e
    155e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1560:	00 80       	ld	r0, Z
    1562:	8e 85       	ldd	r24, Y+14	; 0x0e
    1564:	9f 85       	ldd	r25, Y+15	; 0x0f
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	9f 87       	std	Y+15, r25	; 0x0f
    156a:	8e 87       	std	Y+14, r24	; 0x0e
    156c:	ec 85       	ldd	r30, Y+12	; 0x0c
    156e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1570:	00 82       	st	Z, r0
    1572:	8c 85       	ldd	r24, Y+12	; 0x0c
    1574:	9d 85       	ldd	r25, Y+13	; 0x0d
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	9d 87       	std	Y+13, r25	; 0x0d
    157a:	8c 87       	std	Y+12, r24	; 0x0c
    157c:	98 89       	ldd	r25, Y+16	; 0x10
    157e:	91 50       	subi	r25, 0x01	; 1
    1580:	98 8b       	std	Y+16, r25	; 0x10
    1582:	e8 89       	ldd	r30, Y+16	; 0x10
    1584:	ee 23       	and	r30, r30
    1586:	51 f7       	brne	.-44     	; 0x155c <buzzer_operate+0x28>

	Timer1_init(&TIMER1_Config); /* initialize TIMER driver */
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Timer1_init>

	Timer1_setCallBack(TIMER1_countProcessing);
    1590:	8f ed       	ldi	r24, 0xDF	; 223
    1592:	9a e0       	ldi	r25, 0x0A	; 10
    1594:	0e 94 de 08 	call	0x11bc	; 0x11bc <Timer1_setCallBack>

	Buzzer_ON();
    1598:	0e 94 31 0b 	call	0x1662	; 0x1662 <Buzzer_ON>

	Timer1_Delay (60);
    159c:	8c e3       	ldi	r24, 0x3C	; 60
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 04 0b 	call	0x1608	; 0x1608 <Timer1_Delay>

	Buzzer_OFF();
    15a4:	0e 94 3d 0b 	call	0x167a	; 0x167a <Buzzer_OFF>

	Timer1_deInit();
    15a8:	0e 94 ba 08 	call	0x1174	; 0x1174 <Timer1_deInit>
}
    15ac:	60 96       	adiw	r28, 0x10	; 16
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <TIMER1_countProcessing>:

/*
 * Description :
 * Function to use TIMER1 as required.
 */
void TIMER1_countProcessing(uint16 second_1) {
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <TIMER1_countProcessing+0x6>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	g1_tick++;
    15cc:	80 91 9e 01 	lds	r24, 0x019E
    15d0:	90 91 9f 01 	lds	r25, 0x019F
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	90 93 9f 01 	sts	0x019F, r25
    15da:	80 93 9e 01 	sts	0x019E, r24
	if (g1_tick == (second_1))
    15de:	20 91 9e 01 	lds	r18, 0x019E
    15e2:	30 91 9f 01 	lds	r19, 0x019F
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	28 17       	cp	r18, r24
    15ec:	39 07       	cpc	r19, r25
    15ee:	39 f4       	brne	.+14     	; 0x15fe <TIMER1_countProcessing+0x40>
	{
		Timer1_complete = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 a2 01 	sts	0x01A2, r24
		g1_tick = 0; //clear the tick counter again to count a new 0.5 second
    15f6:	10 92 9f 01 	sts	0x019F, r1
    15fa:	10 92 9e 01 	sts	0x019E, r1
	}
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <Timer1_Delay>:
/*
 * Description :
 * Function to start Timer1 and count as given.
 */
void Timer1_Delay (uint16 seconds)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <Timer1_Delay+0x6>
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
	Timer1_complete =0;
    1616:	10 92 a2 01 	sts	0x01A2, r1
	g1_tick = 0;
    161a:	10 92 9f 01 	sts	0x019F, r1
    161e:	10 92 9e 01 	sts	0x019E, r1
	second_1 = seconds;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	90 93 a1 01 	sts	0x01A1, r25
    162a:	80 93 a0 01 	sts	0x01A0, r24
	while (Timer1_complete != 1){}
    162e:	80 91 a2 01 	lds	r24, 0x01A2
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	e1 f7       	brne	.-8      	; 0x162e <Timer1_Delay+0x26>
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <Buzzer_init>:
 * Description :
 * Functional responsible for Initialize the Buzzer device by:
 * 1. Setting the direction of Buzzer pin
 * 2. Turn off buzzer
 */
void Buzzer_init(void){
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_PORT_ID,Buzzer_PIN_ID,PIN_OUTPUT);  // Set Buzzer pin direction as output pin
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	66 e0       	ldi	r22, 0x06	; 6
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);		  // Initialize Buzzer pin by zero
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	66 e0       	ldi	r22, 0x06	; 6
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <Buzzer_ON>:

/*
 * Description :
 * Set Buzzer Pin by one to turn Buzzer ON
 */
void Buzzer_ON(void){
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_HIGH);		  // Turn On buzzer
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	66 e0       	ldi	r22, 0x06	; 6
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <Buzzer_OFF>:

/*
 * Description :
 * Set Buzzer Pin by zero to turn Buzzer OFF
 */
void Buzzer_OFF(void){
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);		  // Turn Off buzzer
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	66 e0       	ldi	r22, 0x06	; 6
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <GPIO_writePin>
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <main>:
 *******************************************************************************/

#include "application.h"

int main (void)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
	app_init (); // Initialize UART,EEOROM,DC-Motor and Buzzer drivers
    169a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <app_init>

	if (check_pass_exist() == yes )// check if there is a password saved in the EEPROM
    169e:	0e 94 b1 09 	call	0x1362	; 0x1362 <check_pass_exist>
    16a2:	89 37       	cpi	r24, 0x79	; 121
    16a4:	21 f4       	brne	.+8      	; 0x16ae <main+0x1c>
	{
		send_command(Start_Program_Pass); //Start program by asking for saved password
    16a6:	84 e6       	ldi	r24, 0x64	; 100
    16a8:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <main+0x2a>
	}
	else if (check_pass_exist() == 0) //Password not found
    16ae:	0e 94 b1 09 	call	0x1362	; 0x1362 <check_pass_exist>
    16b2:	88 23       	and	r24, r24
    16b4:	19 f4       	brne	.+6      	; 0x16bc <main+0x2a>
	{
		send_command(Send_New_Pass); //Enter New Password
    16b6:	83 e2       	ldi	r24, 0x23	; 35
    16b8:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
	}

	while(1)
	{

		receive_pass(); // receive password or options command
    16bc:	0e 94 2d 09 	call	0x125a	; 0x125a <receive_pass>

		if (pass_recieved[0]  == open_door_chosen )  //+ve chosen
    16c0:	80 91 ab 01 	lds	r24, 0x01AB
    16c4:	8b 32       	cpi	r24, 0x2B	; 43
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <main+0x3e>
		{
			send_command(Send_pass_to_open); //open door
    16c8:	82 e6       	ldi	r24, 0x62	; 98
    16ca:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    16ce:	f6 cf       	rjmp	.-20     	; 0x16bc <main+0x2a>
		}
		else if (pass_recieved[0]  == change_pass_chosen ) //-ve chosen
    16d0:	80 91 ab 01 	lds	r24, 0x01AB
    16d4:	8d 32       	cpi	r24, 0x2D	; 45
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <main+0x4e>
		{
			send_command(Send_pass_to_reset); //ask for password to reset password
    16d8:	86 e6       	ldi	r24, 0x66	; 102
    16da:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    16de:	ee cf       	rjmp	.-36     	; 0x16bc <main+0x2a>
		}
		else if (pass_recieved[5] == start_pass_sent )
    16e0:	80 91 b0 01 	lds	r24, 0x01B0
    16e4:	83 37       	cpi	r24, 0x73	; 115
    16e6:	61 f4       	brne	.+24     	; 0x1700 <main+0x6e>
		{
			if (check_pass_correct() == yes ) //Check if entered pass is correct
    16e8:	0e 94 14 0a 	call	0x1428	; 0x1428 <check_pass_correct>
    16ec:	89 37       	cpi	r24, 0x79	; 121
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <main+0x66>
			{
				send_command(Display_menu);//Display Menu
    16f0:	81 e6       	ldi	r24, 0x61	; 97
    16f2:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    16f6:	e2 cf       	rjmp	.-60     	; 0x16bc <main+0x2a>
			}
			else
			{
				send_command(First_check_pass); //Check pass again
    16f8:	8e e5       	ldi	r24, 0x5E	; 94
    16fa:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    16fe:	de cf       	rjmp	.-68     	; 0x16bc <main+0x2a>
			}
		}
		else if (pass_recieved[5] == Send_New_Pass ) //New Passwords Enter
    1700:	80 91 b0 01 	lds	r24, 0x01B0
    1704:	83 32       	cpi	r24, 0x23	; 35
    1706:	31 f4       	brne	.+12     	; 0x1714 <main+0x82>
		{
			write_pass(); //Write New Password in EEPROM
    1708:	0e 94 45 09 	call	0x128a	; 0x128a <write_pass>
			send_command(ReSend_New_Pass); //Check that entered password is correct
    170c:	85 e6       	ldi	r24, 0x65	; 101
    170e:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1712:	d4 cf       	rjmp	.-88     	; 0x16bc <main+0x2a>
		}
		else if (pass_recieved[5] == resend_new_password ) // check confirmation of new password
    1714:	80 91 b0 01 	lds	r24, 0x01B0
    1718:	81 32       	cpi	r24, 0x21	; 33
    171a:	79 f4       	brne	.+30     	; 0x173a <main+0xa8>
		{
			if (check_pass_correct() == yes ) //Check if entered pass is correct
    171c:	0e 94 14 0a 	call	0x1428	; 0x1428 <check_pass_correct>
    1720:	89 37       	cpi	r24, 0x79	; 121
    1722:	39 f4       	brne	.+14     	; 0x1732 <main+0xa0>
			{
				send_command(pass_is_changed); // pass is changed message
    1724:	8d e6       	ldi	r24, 0x6D	; 109
    1726:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
				send_command(Display_menu); //Show Menu again
    172a:	81 e6       	ldi	r24, 0x61	; 97
    172c:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1730:	c5 cf       	rjmp	.-118    	; 0x16bc <main+0x2a>
			}
			else
			{
				send_command(Send_New_Pass); //Take New Password again
    1732:	83 e2       	ldi	r24, 0x23	; 35
    1734:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1738:	c1 cf       	rjmp	.-126    	; 0x16bc <main+0x2a>
			}
		}
		else if  (pass_recieved[5]  == First_check_pass ) //check pass for first time
    173a:	80 91 b0 01 	lds	r24, 0x01B0
    173e:	8e 35       	cpi	r24, 0x5E	; 94
    1740:	61 f4       	brne	.+24     	; 0x175a <main+0xc8>
		{
			if (check_pass_correct() == yes ) //Check if entered pass is correct
    1742:	0e 94 14 0a 	call	0x1428	; 0x1428 <check_pass_correct>
    1746:	89 37       	cpi	r24, 0x79	; 121
    1748:	21 f4       	brne	.+8      	; 0x1752 <main+0xc0>
			{
				send_command(Display_menu); //Show Menu again
    174a:	81 e6       	ldi	r24, 0x61	; 97
    174c:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1750:	b5 cf       	rjmp	.-150    	; 0x16bc <main+0x2a>
			}
			else
			{
				send_command(Second_check_pass); //Check pass again
    1752:	86 e2       	ldi	r24, 0x26	; 38
    1754:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1758:	b1 cf       	rjmp	.-158    	; 0x16bc <main+0x2a>
			}
		}
		else if  (pass_recieved[5]  == Second_check_pass ) //check pass for third time
    175a:	80 91 b0 01 	lds	r24, 0x01B0
    175e:	86 32       	cpi	r24, 0x26	; 38
    1760:	89 f4       	brne	.+34     	; 0x1784 <main+0xf2>
		{
			if (check_pass_correct() == yes ) //Check if entered pass is correct
    1762:	0e 94 14 0a 	call	0x1428	; 0x1428 <check_pass_correct>
    1766:	89 37       	cpi	r24, 0x79	; 121
    1768:	21 f4       	brne	.+8      	; 0x1772 <main+0xe0>
			{
				send_command(Display_menu); //Show Menu again
    176a:	81 e6       	ldi	r24, 0x61	; 97
    176c:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1770:	a5 cf       	rjmp	.-182    	; 0x16bc <main+0x2a>
			}
			else
			{

				send_command(error_message_display); //error message
    1772:	88 e7       	ldi	r24, 0x78	; 120
    1774:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
				buzzer_operate(); //start buzzer
    1778:	0e 94 9a 0a 	call	0x1534	; 0x1534 <buzzer_operate>
				send_command(Display_menu); //Step 2 main options
    177c:	81 e6       	ldi	r24, 0x61	; 97
    177e:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    1782:	9c cf       	rjmp	.-200    	; 0x16bc <main+0x2a>
			}

		}
		else if (pass_recieved[5]  == open_pass_sent ) // ask for pass when + chosen
    1784:	80 91 b0 01 	lds	r24, 0x01B0
    1788:	85 32       	cpi	r24, 0x25	; 37
    178a:	89 f4       	brne	.+34     	; 0x17ae <main+0x11c>
		{
			if (check_pass_correct() == yes ) //Check if entered pass is correct
    178c:	0e 94 14 0a 	call	0x1428	; 0x1428 <check_pass_correct>
    1790:	89 37       	cpi	r24, 0x79	; 121
    1792:	49 f4       	brne	.+18     	; 0x17a6 <main+0x114>
			{
				send_command(Display_motor_state); // Make MC1 display Motor State
    1794:	83 e6       	ldi	r24, 0x63	; 99
    1796:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
				motor_operate(); //Start openning door
    179a:	0e 94 41 0a 	call	0x1482	; 0x1482 <motor_operate>
				send_command(Display_menu); //Show Menu again
    179e:	81 e6       	ldi	r24, 0x61	; 97
    17a0:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    17a4:	8b cf       	rjmp	.-234    	; 0x16bc <main+0x2a>
			}
			else
			{
				send_command(First_check_pass); //Check pass again
    17a6:	8e e5       	ldi	r24, 0x5E	; 94
    17a8:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    17ac:	87 cf       	rjmp	.-242    	; 0x16bc <main+0x2a>
			}
		}
		else if  (pass_recieved[5]  == reset_pass_sent ) // ask for pass when - chosen
    17ae:	80 91 b0 01 	lds	r24, 0x01B0
    17b2:	80 34       	cpi	r24, 0x40	; 64
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <main+0x126>
    17b6:	82 cf       	rjmp	.-252    	; 0x16bc <main+0x2a>
		{
			if (check_pass_correct() == yes) //Check if entered pass is correct
    17b8:	0e 94 14 0a 	call	0x1428	; 0x1428 <check_pass_correct>
    17bc:	89 37       	cpi	r24, 0x79	; 121
    17be:	21 f4       	brne	.+8      	; 0x17c8 <main+0x136>
			{
				send_command(Send_New_Pass); //Store New Password
    17c0:	83 e2       	ldi	r24, 0x23	; 35
    17c2:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    17c6:	7a cf       	rjmp	.-268    	; 0x16bc <main+0x2a>
			}
			else
			{
				send_command(First_check_pass); //Check pass again
    17c8:	8e e5       	ldi	r24, 0x5E	; 94
    17ca:	0e 94 38 09 	call	0x1270	; 0x1270 <send_command>
    17ce:	76 cf       	rjmp	.-276    	; 0x16bc <main+0x2a>

000017d0 <EEPROM_init>:
/*
 * Description :
 * Function that Initialize EEPROM
 */
void EEPROM_init (void)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <EEPROM_init+0x6>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for Twi driver */
	TWI_ConfigType TWI_Config = {1,r400K};
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	8a 83       	std	Y+2, r24	; 0x02

	/* Initialize Twi driver */
	TWI_init(&TWI_Config);
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_init>
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <EEPROM_writeByte+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <EEPROM_writeByte+0x8>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1806:	0e 94 02 10 	call	0x2004	; 0x2004 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    180a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    180e:	88 30       	cpi	r24, 0x08	; 8
    1810:	11 f0       	breq	.+4      	; 0x1816 <EEPROM_writeByte+0x22>
        return ERROR;
    1812:	1c 82       	std	Y+4, r1	; 0x04
    1814:	28 c0       	rjmp	.+80     	; 0x1866 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	80 70       	andi	r24, 0x00	; 0
    181c:	97 70       	andi	r25, 0x07	; 7
    181e:	88 0f       	add	r24, r24
    1820:	89 2f       	mov	r24, r25
    1822:	88 1f       	adc	r24, r24
    1824:	99 0b       	sbc	r25, r25
    1826:	91 95       	neg	r25
    1828:	80 6a       	ori	r24, 0xA0	; 160
    182a:	0e 94 1d 10 	call	0x203a	; 0x203a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    182e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    1832:	88 31       	cpi	r24, 0x18	; 24
    1834:	11 f0       	breq	.+4      	; 0x183a <EEPROM_writeByte+0x46>
        return ERROR; 
    1836:	1c 82       	std	Y+4, r1	; 0x04
    1838:	16 c0       	rjmp	.+44     	; 0x1866 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	0e 94 1d 10 	call	0x203a	; 0x203a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1840:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    1844:	88 32       	cpi	r24, 0x28	; 40
    1846:	11 f0       	breq	.+4      	; 0x184c <EEPROM_writeByte+0x58>
        return ERROR;
    1848:	1c 82       	std	Y+4, r1	; 0x04
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	0e 94 1d 10 	call	0x203a	; 0x203a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1852:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    1856:	88 32       	cpi	r24, 0x28	; 40
    1858:	11 f0       	breq	.+4      	; 0x185e <EEPROM_writeByte+0x6a>
        return ERROR;
    185a:	1c 82       	std	Y+4, r1	; 0x04
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    185e:	0e 94 12 10 	call	0x2024	; 0x2024 <TWI_stop>
	
    return SUCCESS;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8c 83       	std	Y+4, r24	; 0x04
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <EEPROM_readByte+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <EEPROM_readByte+0x8>
    187e:	0f 92       	push	r0
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	7c 83       	std	Y+4, r23	; 0x04
    188a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    188c:	0e 94 02 10 	call	0x2004	; 0x2004 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1890:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	11 f0       	breq	.+4      	; 0x189c <EEPROM_readByte+0x26>
        return ERROR;
    1898:	1d 82       	std	Y+5, r1	; 0x05
    189a:	44 c0       	rjmp	.+136    	; 0x1924 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	80 70       	andi	r24, 0x00	; 0
    18a2:	97 70       	andi	r25, 0x07	; 7
    18a4:	88 0f       	add	r24, r24
    18a6:	89 2f       	mov	r24, r25
    18a8:	88 1f       	adc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	91 95       	neg	r25
    18ae:	80 6a       	ori	r24, 0xA0	; 160
    18b0:	0e 94 1d 10 	call	0x203a	; 0x203a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18b4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    18b8:	88 31       	cpi	r24, 0x18	; 24
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <EEPROM_readByte+0x4a>
        return ERROR;
    18bc:	1d 82       	std	Y+5, r1	; 0x05
    18be:	32 c0       	rjmp	.+100    	; 0x1924 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	0e 94 1d 10 	call	0x203a	; 0x203a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18c6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    18ca:	88 32       	cpi	r24, 0x28	; 40
    18cc:	11 f0       	breq	.+4      	; 0x18d2 <EEPROM_readByte+0x5c>
        return ERROR;
    18ce:	1d 82       	std	Y+5, r1	; 0x05
    18d0:	29 c0       	rjmp	.+82     	; 0x1924 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18d2:	0e 94 02 10 	call	0x2004	; 0x2004 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18d6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    18da:	80 31       	cpi	r24, 0x10	; 16
    18dc:	11 f0       	breq	.+4      	; 0x18e2 <EEPROM_readByte+0x6c>
        return ERROR;
    18de:	1d 82       	std	Y+5, r1	; 0x05
    18e0:	21 c0       	rjmp	.+66     	; 0x1924 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	80 70       	andi	r24, 0x00	; 0
    18e8:	97 70       	andi	r25, 0x07	; 7
    18ea:	88 0f       	add	r24, r24
    18ec:	89 2f       	mov	r24, r25
    18ee:	88 1f       	adc	r24, r24
    18f0:	99 0b       	sbc	r25, r25
    18f2:	91 95       	neg	r25
    18f4:	81 6a       	ori	r24, 0xA1	; 161
    18f6:	0e 94 1d 10 	call	0x203a	; 0x203a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    18fa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    18fe:	80 34       	cpi	r24, 0x40	; 64
    1900:	11 f0       	breq	.+4      	; 0x1906 <EEPROM_readByte+0x90>
        return ERROR;
    1902:	1d 82       	std	Y+5, r1	; 0x05
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1906:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_readByteWithNACK>
    190a:	eb 81       	ldd	r30, Y+3	; 0x03
    190c:	fc 81       	ldd	r31, Y+4	; 0x04
    190e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1910:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_getStatus>
    1914:	88 35       	cpi	r24, 0x58	; 88
    1916:	11 f0       	breq	.+4      	; 0x191c <EEPROM_readByte+0xa6>
        return ERROR;
    1918:	1d 82       	std	Y+5, r1	; 0x05
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    191c:	0e 94 12 10 	call	0x2024	; 0x2024 <TWI_stop>

    return SUCCESS;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <GPIO_setupPinDirection+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <GPIO_setupPinDirection+0x8>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6a 83       	std	Y+2, r22	; 0x02
    1948:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	88 30       	cpi	r24, 0x08	; 8
    194e:	08 f0       	brcs	.+2      	; 0x1952 <GPIO_setupPinDirection+0x1c>
    1950:	d5 c0       	rjmp	.+426    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	84 30       	cpi	r24, 0x04	; 4
    1956:	08 f0       	brcs	.+2      	; 0x195a <GPIO_setupPinDirection+0x24>
    1958:	d1 c0       	rjmp	.+418    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3d 83       	std	Y+5, r19	; 0x05
    1962:	2c 83       	std	Y+4, r18	; 0x04
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	91 05       	cpc	r25, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <GPIO_setupPinDirection+0x3a>
    196e:	43 c0       	rjmp	.+134    	; 0x19f6 <GPIO_setupPinDirection+0xc0>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	2c f4       	brge	.+10     	; 0x1984 <GPIO_setupPinDirection+0x4e>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	71 f0       	breq	.+28     	; 0x199e <GPIO_setupPinDirection+0x68>
    1982:	bc c0       	rjmp	.+376    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <GPIO_setupPinDirection+0x5a>
    198e:	5f c0       	rjmp	.+190    	; 0x1a4e <GPIO_setupPinDirection+0x118>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <GPIO_setupPinDirection+0x66>
    199a:	85 c0       	rjmp	.+266    	; 0x1aa6 <GPIO_setupPinDirection+0x170>
    199c:	af c0       	rjmp	.+350    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19a4:	aa e3       	ldi	r26, 0x3A	; 58
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ea e3       	ldi	r30, 0x3A	; 58
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_setupPinDirection+0x8c>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_setupPinDirection+0x88>
    19c6:	84 2b       	or	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	98 c0       	rjmp	.+304    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19cc:	aa e3       	ldi	r26, 0x3A	; 58
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ea e3       	ldi	r30, 0x3A	; 58
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_setupPinDirection+0xb4>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_setupPinDirection+0xb0>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	83 c0       	rjmp	.+262    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	a1 f4       	brne	.+40     	; 0x1a24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19fc:	a7 e3       	ldi	r26, 0x37	; 55
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e7 e3       	ldi	r30, 0x37	; 55
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_setupPinDirection+0xe4>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_setupPinDirection+0xe0>
    1a1e:	84 2b       	or	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	6c c0       	rjmp	.+216    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a24:	a7 e3       	ldi	r26, 0x37	; 55
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e7 e3       	ldi	r30, 0x37	; 55
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_setupPinDirection+0x10c>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_setupPinDirection+0x108>
    1a46:	80 95       	com	r24
    1a48:	84 23       	and	r24, r20
    1a4a:	8c 93       	st	X, r24
    1a4c:	57 c0       	rjmp	.+174    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a54:	a4 e3       	ldi	r26, 0x34	; 52
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e4 e3       	ldi	r30, 0x34	; 52
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_setupPinDirection+0x13c>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_setupPinDirection+0x138>
    1a76:	84 2b       	or	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	40 c0       	rjmp	.+128    	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a7c:	a4 e3       	ldi	r26, 0x34	; 52
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e4 e3       	ldi	r30, 0x34	; 52
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_setupPinDirection+0x164>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_setupPinDirection+0x160>
    1a9e:	80 95       	com	r24
    1aa0:	84 23       	and	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	2b c0       	rjmp	.+86     	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	a1 f4       	brne	.+40     	; 0x1ad4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1aac:	a1 e3       	ldi	r26, 0x31	; 49
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e1 e3       	ldi	r30, 0x31	; 49
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_setupPinDirection+0x194>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_setupPinDirection+0x190>
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ad4:	a1 e3       	ldi	r26, 0x31	; 49
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e1 e3       	ldi	r30, 0x31	; 49
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_setupPinDirection+0x1bc>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_setupPinDirection+0x1b8>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <GPIO_writePin+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <GPIO_writePin+0x8>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	6a 83       	std	Y+2, r22	; 0x02
    1b1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	88 30       	cpi	r24, 0x08	; 8
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <GPIO_writePin+0x1c>
    1b26:	d5 c0       	rjmp	.+426    	; 0x1cd2 <GPIO_writePin+0x1c6>
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <GPIO_writePin+0x24>
    1b2e:	d1 c0       	rjmp	.+418    	; 0x1cd2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3d 83       	std	Y+5, r19	; 0x05
    1b38:	2c 83       	std	Y+4, r18	; 0x04
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <GPIO_writePin+0x3a>
    1b44:	43 c0       	rjmp	.+134    	; 0x1bcc <GPIO_writePin+0xc0>
    1b46:	2c 81       	ldd	r18, Y+4	; 0x04
    1b48:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <GPIO_writePin+0x4e>
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	71 f0       	breq	.+28     	; 0x1b74 <GPIO_writePin+0x68>
    1b58:	bc c0       	rjmp	.+376    	; 0x1cd2 <GPIO_writePin+0x1c6>
    1b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <GPIO_writePin+0x5a>
    1b64:	5f c0       	rjmp	.+190    	; 0x1c24 <GPIO_writePin+0x118>
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <GPIO_writePin+0x66>
    1b70:	85 c0       	rjmp	.+266    	; 0x1c7c <GPIO_writePin+0x170>
    1b72:	af c0       	rjmp	.+350    	; 0x1cd2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	a1 f4       	brne	.+40     	; 0x1ba2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b7a:	ab e3       	ldi	r26, 0x3B	; 59
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	eb e3       	ldi	r30, 0x3B	; 59
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <GPIO_writePin+0x8c>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <GPIO_writePin+0x88>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	98 c0       	rjmp	.+304    	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ba2:	ab e3       	ldi	r26, 0x3B	; 59
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_writePin+0xb4>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_writePin+0xb0>
    1bc4:	80 95       	com	r24
    1bc6:	84 23       	and	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	83 c0       	rjmp	.+262    	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	a1 f4       	brne	.+40     	; 0x1bfa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bd2:	a8 e3       	ldi	r26, 0x38	; 56
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <GPIO_writePin+0xe4>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <GPIO_writePin+0xe0>
    1bf4:	84 2b       	or	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	6c c0       	rjmp	.+216    	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1bfa:	a8 e3       	ldi	r26, 0x38	; 56
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_writePin+0x10c>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_writePin+0x108>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	57 c0       	rjmp	.+174    	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	a1 f4       	brne	.+40     	; 0x1c52 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c2a:	a5 e3       	ldi	r26, 0x35	; 53
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e5 e3       	ldi	r30, 0x35	; 53
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <GPIO_writePin+0x13c>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <GPIO_writePin+0x138>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	40 c0       	rjmp	.+128    	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c52:	a5 e3       	ldi	r26, 0x35	; 53
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e5 e3       	ldi	r30, 0x35	; 53
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_writePin+0x164>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_writePin+0x160>
    1c74:	80 95       	com	r24
    1c76:	84 23       	and	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	2b c0       	rjmp	.+86     	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	a1 f4       	brne	.+40     	; 0x1caa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c82:	a2 e3       	ldi	r26, 0x32	; 50
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <GPIO_writePin+0x194>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <GPIO_writePin+0x190>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1caa:	a2 e3       	ldi	r26, 0x32	; 50
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e2 e3       	ldi	r30, 0x32	; 50
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_writePin+0x1bc>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_writePin+0x1b8>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <GPIO_readPin+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <GPIO_readPin+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	88 30       	cpi	r24, 0x08	; 8
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <GPIO_readPin+0x1c>
    1cfc:	84 c0       	rjmp	.+264    	; 0x1e06 <GPIO_readPin+0x124>
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <GPIO_readPin+0x24>
    1d04:	80 c0       	rjmp	.+256    	; 0x1e06 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	3d 83       	std	Y+5, r19	; 0x05
    1d0e:	2c 83       	std	Y+4, r18	; 0x04
    1d10:	4c 81       	ldd	r20, Y+4	; 0x04
    1d12:	5d 81       	ldd	r21, Y+5	; 0x05
    1d14:	41 30       	cpi	r20, 0x01	; 1
    1d16:	51 05       	cpc	r21, r1
    1d18:	79 f1       	breq	.+94     	; 0x1d78 <GPIO_readPin+0x96>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	91 05       	cpc	r25, r1
    1d22:	34 f4       	brge	.+12     	; 0x1d30 <GPIO_readPin+0x4e>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	21 15       	cp	r18, r1
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	69 f0       	breq	.+26     	; 0x1d48 <GPIO_readPin+0x66>
    1d2e:	6b c0       	rjmp	.+214    	; 0x1e06 <GPIO_readPin+0x124>
    1d30:	4c 81       	ldd	r20, Y+4	; 0x04
    1d32:	5d 81       	ldd	r21, Y+5	; 0x05
    1d34:	42 30       	cpi	r20, 0x02	; 2
    1d36:	51 05       	cpc	r21, r1
    1d38:	b9 f1       	breq	.+110    	; 0x1da8 <GPIO_readPin+0xc6>
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	83 30       	cpi	r24, 0x03	; 3
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <GPIO_readPin+0x64>
    1d44:	49 c0       	rjmp	.+146    	; 0x1dd8 <GPIO_readPin+0xf6>
    1d46:	5f c0       	rjmp	.+190    	; 0x1e06 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d48:	e9 e3       	ldi	r30, 0x39	; 57
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a9 01       	movw	r20, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <GPIO_readPin+0x7e>
    1d5c:	55 95       	asr	r21
    1d5e:	47 95       	ror	r20
    1d60:	8a 95       	dec	r24
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <GPIO_readPin+0x7a>
    1d64:	ca 01       	movw	r24, r20
    1d66:	81 70       	andi	r24, 0x01	; 1
    1d68:	90 70       	andi	r25, 0x00	; 0
    1d6a:	88 23       	and	r24, r24
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	49 c0       	rjmp	.+146    	; 0x1e06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	47 c0       	rjmp	.+142    	; 0x1e06 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d78:	e6 e3       	ldi	r30, 0x36	; 54
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_readPin+0xae>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_readPin+0xaa>
    1d94:	ca 01       	movw	r24, r20
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	88 23       	and	r24, r24
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	31 c0       	rjmp	.+98     	; 0x1e06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da4:	19 82       	std	Y+1, r1	; 0x01
    1da6:	2f c0       	rjmp	.+94     	; 0x1e06 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1da8:	e3 e3       	ldi	r30, 0x33	; 51
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a9 01       	movw	r20, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_readPin+0xde>
    1dbc:	55 95       	asr	r21
    1dbe:	47 95       	ror	r20
    1dc0:	8a 95       	dec	r24
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_readPin+0xda>
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	81 70       	andi	r24, 0x01	; 1
    1dc8:	90 70       	andi	r25, 0x00	; 0
    1dca:	88 23       	and	r24, r24
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	19 c0       	rjmp	.+50     	; 0x1e06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	17 c0       	rjmp	.+46     	; 0x1e06 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1dd8:	e0 e3       	ldi	r30, 0x30	; 48
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a9 01       	movw	r20, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_readPin+0x10e>
    1dec:	55 95       	asr	r21
    1dee:	47 95       	ror	r20
    1df0:	8a 95       	dec	r24
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_readPin+0x10a>
    1df4:	ca 01       	movw	r24, r20
    1df6:	81 70       	andi	r24, 0x01	; 1
    1df8:	90 70       	andi	r25, 0x00	; 0
    1dfa:	88 23       	and	r24, r24
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e04:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_setupPortDirection+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_setupPortDirection+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	90 f5       	brcc	.+100    	; 0x1e92 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3c 83       	std	Y+4, r19	; 0x04
    1e36:	2b 83       	std	Y+3, r18	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	d1 f0       	breq	.+52     	; 0x1e76 <GPIO_setupPortDirection+0x5e>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <GPIO_setupPortDirection+0x3e>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <GPIO_setupPortDirection+0x54>
    1e54:	1e c0       	rjmp	.+60     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	22 30       	cpi	r18, 0x02	; 2
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	81 f0       	breq	.+32     	; 0x1e80 <GPIO_setupPortDirection+0x68>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	83 30       	cpi	r24, 0x03	; 3
    1e66:	91 05       	cpc	r25, r1
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <GPIO_setupPortDirection+0x72>
    1e6a:	13 c0       	rjmp	.+38     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e6c:	ea e3       	ldi	r30, 0x3A	; 58
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 83       	st	Z, r24
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e76:	e7 e3       	ldi	r30, 0x37	; 55
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	80 83       	st	Z, r24
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e80:	e4 e3       	ldi	r30, 0x34	; 52
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 83       	st	Z, r24
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e8a:	e1 e3       	ldi	r30, 0x31	; 49
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <GPIO_writePort+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <GPIO_writePort+0x8>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	90 f5       	brcc	.+100    	; 0x1f1a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3c 83       	std	Y+4, r19	; 0x04
    1ebe:	2b 83       	std	Y+3, r18	; 0x03
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	d1 f0       	breq	.+52     	; 0x1efe <GPIO_writePort+0x5e>
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <GPIO_writePort+0x3e>
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	61 f0       	breq	.+24     	; 0x1ef4 <GPIO_writePort+0x54>
    1edc:	1e c0       	rjmp	.+60     	; 0x1f1a <GPIO_writePort+0x7a>
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee2:	22 30       	cpi	r18, 0x02	; 2
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	81 f0       	breq	.+32     	; 0x1f08 <GPIO_writePort+0x68>
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	83 30       	cpi	r24, 0x03	; 3
    1eee:	91 05       	cpc	r25, r1
    1ef0:	81 f0       	breq	.+32     	; 0x1f12 <GPIO_writePort+0x72>
    1ef2:	13 c0       	rjmp	.+38     	; 0x1f1a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ef4:	eb e3       	ldi	r30, 0x3B	; 59
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	80 83       	st	Z, r24
    1efc:	0e c0       	rjmp	.+28     	; 0x1f1a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1efe:	e8 e3       	ldi	r30, 0x38	; 56
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	80 83       	st	Z, r24
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f08:	e5 e3       	ldi	r30, 0x35	; 53
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	80 83       	st	Z, r24
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f12:	e2 e3       	ldi	r30, 0x32	; 50
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <GPIO_readPort+0x6>
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <GPIO_readPort+0x8>
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f36:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	84 30       	cpi	r24, 0x04	; 4
    1f3c:	90 f5       	brcc	.+100    	; 0x1fa2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3c 83       	std	Y+4, r19	; 0x04
    1f46:	2b 83       	std	Y+3, r18	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	d1 f0       	breq	.+52     	; 0x1f86 <GPIO_readPort+0x5e>
    1f52:	2b 81       	ldd	r18, Y+3	; 0x03
    1f54:	3c 81       	ldd	r19, Y+4	; 0x04
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <GPIO_readPort+0x3e>
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <GPIO_readPort+0x54>
    1f64:	1e c0       	rjmp	.+60     	; 0x1fa2 <GPIO_readPort+0x7a>
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	81 f0       	breq	.+32     	; 0x1f90 <GPIO_readPort+0x68>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	81 f0       	breq	.+32     	; 0x1f9a <GPIO_readPort+0x72>
    1f7a:	13 c0       	rjmp	.+38     	; 0x1fa2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f7c:	e9 e3       	ldi	r30, 0x39	; 57
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	0e c0       	rjmp	.+28     	; 0x1fa2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f86:	e6 e3       	ldi	r30, 0x36	; 54
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f90:	e3 e3       	ldi	r30, 0x33	; 51
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f9a:	e0 e3       	ldi	r30, 0x30	; 48
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <TWI_init+0x6>
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: bit rate as given using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = (Config_Ptr->bit_rate) ;
    1fc0:	a0 e2       	ldi	r26, 0x20	; 32
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	81 81       	ldd	r24, Z+1	; 0x01
    1fca:	8c 93       	st	X, r24

	TWSR = 0x00;
    1fcc:	e1 e2       	ldi	r30, 0x21	; 33
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	10 82       	st	Z, r1

	/* store the address of micro-controller
	 * General Call Recognition: Off
	 */
	TWAR = (TWAR & 0x01) | ((Config_Ptr->address)<<1);
    1fd2:	a2 e2       	ldi	r26, 0x22	; 34
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e2 e2       	ldi	r30, 0x22	; 34
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	21 70       	andi	r18, 0x01	; 1
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 2f       	mov	r24, r24
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	82 2b       	or	r24, r18
    1ff0:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1ff2:	e6 e5       	ldi	r30, 0x56	; 86
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	84 e0       	ldi	r24, 0x04	; 4
    1ff8:	80 83       	st	Z, r24

}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <TWI_start>:

void TWI_start(void)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    200c:	e6 e5       	ldi	r30, 0x56	; 86
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	84 ea       	ldi	r24, 0xA4	; 164
    2012:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2014:	e6 e5       	ldi	r30, 0x56	; 86
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	88 23       	and	r24, r24
    201c:	dc f7       	brge	.-10     	; 0x2014 <TWI_start+0x10>
}
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <TWI_stop>:

void TWI_stop(void)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    202c:	e6 e5       	ldi	r30, 0x56	; 86
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	84 e9       	ldi	r24, 0x94	; 148
    2032:	80 83       	st	Z, r24
}
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2046:	e3 e2       	ldi	r30, 0x23	; 35
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	80 83       	st	Z, r24
	/*/
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    204e:	e6 e5       	ldi	r30, 0x56	; 86
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	84 e8       	ldi	r24, 0x84	; 132
    2054:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2056:	e6 e5       	ldi	r30, 0x56	; 86
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 23       	and	r24, r24
    205e:	dc f7       	brge	.-10     	; 0x2056 <TWI_writeByte+0x1c>
}
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2070:	e6 e5       	ldi	r30, 0x56	; 86
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	84 ec       	ldi	r24, 0xC4	; 196
    2076:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2078:	e6 e5       	ldi	r30, 0x56	; 86
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	dc f7       	brge	.-10     	; 0x2078 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2082:	e3 e2       	ldi	r30, 0x23	; 35
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2096:	e6 e5       	ldi	r30, 0x56	; 86
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	84 e8       	ldi	r24, 0x84	; 132
    209c:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    209e:	e6 e5       	ldi	r30, 0x56	; 86
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 23       	and	r24, r24
    20a6:	dc f7       	brge	.-10     	; 0x209e <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    20a8:	e3 e2       	ldi	r30, 0x23	; 35
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	0f 92       	push	r0
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    20be:	e1 e2       	ldi	r30, 0x21	; 33
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	88 7f       	andi	r24, 0xF8	; 248
    20c6:	89 83       	std	Y+1, r24	; 0x01
	return status;
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType * Config_Ptr)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <UART_init+0x6>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <UART_init+0x8>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    20e2:	1a 82       	std	Y+2, r1	; 0x02
    20e4:	19 82       	std	Y+1, r1	; 0x01

	/*  operating-mode as required in configuration */
	if (Config_Ptr ->operating_mode ==Synch_Master){
    20e6:	eb 81       	ldd	r30, Y+3	; 0x03
    20e8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ea:	87 81       	ldd	r24, Z+7	; 0x07
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	41 f4       	brne	.+16     	; 0x2100 <UART_init+0x2e>
	UCSRC = (UCSRC & 0xBF) | (1<<UMSEL);
    20f0:	a0 e4       	ldi	r26, 0x40	; 64
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e0 e4       	ldi	r30, 0x40	; 64
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	80 64       	ori	r24, 0x40	; 64
    20fc:	8c 93       	st	X, r24
    20fe:	08 c0       	rjmp	.+16     	; 0x2110 <UART_init+0x3e>
	}else{
	UCSRA = ((Config_Ptr->operating_mode & 0x01)<<U2X);
    2100:	ab e2       	ldi	r26, 0x2B	; 43
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	eb 81       	ldd	r30, Y+3	; 0x03
    2106:	fc 81       	ldd	r31, Y+4	; 0x04
    2108:	87 81       	ldd	r24, Z+7	; 0x07
    210a:	81 70       	andi	r24, 0x01	; 1
    210c:	88 0f       	add	r24, r24
    210e:	8c 93       	st	X, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2110:	ea e2       	ldi	r30, 0x2A	; 42
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	88 e1       	ldi	r24, 0x18	; 24
    2116:	80 83       	st	Z, r24

	/*  bit-data as required in configuration */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->bit_data)>>2)<<UCSZ2);
    2118:	aa e2       	ldi	r26, 0x2A	; 42
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ea e2       	ldi	r30, 0x2A	; 42
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	2b 7f       	andi	r18, 0xFB	; 251
    2126:	eb 81       	ldd	r30, Y+3	; 0x03
    2128:	fc 81       	ldd	r31, Y+4	; 0x04
    212a:	84 81       	ldd	r24, Z+4	; 0x04
    212c:	86 95       	lsr	r24
    212e:	86 95       	lsr	r24
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	82 2b       	or	r24, r18
    213e:	8c 93       	st	X, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2140:	e0 e4       	ldi	r30, 0x40	; 64
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 e8       	ldi	r24, 0x80	; 128
    2146:	80 83       	st	Z, r24

	/*  bit-data as required in configuration */
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data & 0x03)<<UCSZ1);
    2148:	a0 e4       	ldi	r26, 0x40	; 64
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e0 e4       	ldi	r30, 0x40	; 64
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	28 2f       	mov	r18, r24
    2154:	29 7f       	andi	r18, 0xF9	; 249
    2156:	eb 81       	ldd	r30, Y+3	; 0x03
    2158:	fc 81       	ldd	r31, Y+4	; 0x04
    215a:	84 81       	ldd	r24, Z+4	; 0x04
    215c:	88 2f       	mov	r24, r24
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	83 70       	andi	r24, 0x03	; 3
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	82 2b       	or	r24, r18
    216e:	8c 93       	st	X, r24

	/*  parity test as required in configuration */
	UCSRC =	(UCSRC & 0xCF) | ((Config_Ptr->parity & 0x03)<<UPM0);
    2170:	a0 e4       	ldi	r26, 0x40	; 64
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e0 e4       	ldi	r30, 0x40	; 64
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	28 2f       	mov	r18, r24
    217c:	2f 7c       	andi	r18, 0xCF	; 207
    217e:	eb 81       	ldd	r30, Y+3	; 0x03
    2180:	fc 81       	ldd	r31, Y+4	; 0x04
    2182:	85 81       	ldd	r24, Z+5	; 0x05
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	83 70       	andi	r24, 0x03	; 3
    218a:	90 70       	andi	r25, 0x00	; 0
    218c:	82 95       	swap	r24
    218e:	92 95       	swap	r25
    2190:	90 7f       	andi	r25, 0xF0	; 240
    2192:	98 27       	eor	r25, r24
    2194:	80 7f       	andi	r24, 0xF0	; 240
    2196:	98 27       	eor	r25, r24
    2198:	82 2b       	or	r24, r18
    219a:	8c 93       	st	X, r24

	/*  stop bit as required in configuration */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit & 0x01)<<USBS);
    219c:	a0 e4       	ldi	r26, 0x40	; 64
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e0 e4       	ldi	r30, 0x40	; 64
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	28 2f       	mov	r18, r24
    21a8:	27 7f       	andi	r18, 0xF7	; 247
    21aa:	eb 81       	ldd	r30, Y+3	; 0x03
    21ac:	fc 81       	ldd	r31, Y+4	; 0x04
    21ae:	86 81       	ldd	r24, Z+6	; 0x06
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	81 70       	andi	r24, 0x01	; 1
    21b6:	90 70       	andi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	82 2b       	or	r24, r18
    21c6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	if((Config_Ptr -> operating_mode)==Asynch_Normal){
    21c8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ca:	fc 81       	ldd	r31, Y+4	; 0x04
    21cc:	87 81       	ldd	r24, Z+7	; 0x07
    21ce:	88 23       	and	r24, r24
    21d0:	31 f5       	brne	.+76     	; 0x221e <UART_init+0x14c>
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 16UL))) - 1);
    21d2:	eb 81       	ldd	r30, Y+3	; 0x03
    21d4:	fc 81       	ldd	r31, Y+4	; 0x04
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	a2 81       	ldd	r26, Z+2	; 0x02
    21dc:	b3 81       	ldd	r27, Z+3	; 0x03
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	aa 1f       	adc	r26, r26
    21e4:	bb 1f       	adc	r27, r27
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	aa 1f       	adc	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	aa 1f       	adc	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	aa 1f       	adc	r26, r26
    21fc:	bb 1f       	adc	r27, r27
    21fe:	9c 01       	movw	r18, r24
    2200:	ad 01       	movw	r20, r26
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	92 e1       	ldi	r25, 0x12	; 18
    2206:	aa e7       	ldi	r26, 0x7A	; 122
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__udivmodsi4>
    2212:	da 01       	movw	r26, r20
    2214:	c9 01       	movw	r24, r18
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	45 c0       	rjmp	.+138    	; 0x22a8 <UART_init+0x1d6>
	}

	/* Calculate the UBRR register value */
	else if((Config_Ptr -> operating_mode)==Asynch_Double){
    221e:	eb 81       	ldd	r30, Y+3	; 0x03
    2220:	fc 81       	ldd	r31, Y+4	; 0x04
    2222:	87 81       	ldd	r24, Z+7	; 0x07
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	11 f5       	brne	.+68     	; 0x226c <UART_init+0x19a>
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2228:	eb 81       	ldd	r30, Y+3	; 0x03
    222a:	fc 81       	ldd	r31, Y+4	; 0x04
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	a2 81       	ldd	r26, Z+2	; 0x02
    2232:	b3 81       	ldd	r27, Z+3	; 0x03
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	aa 1f       	adc	r26, r26
    223a:	bb 1f       	adc	r27, r27
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	aa 1f       	adc	r26, r26
    2242:	bb 1f       	adc	r27, r27
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	aa 1f       	adc	r26, r26
    224a:	bb 1f       	adc	r27, r27
    224c:	9c 01       	movw	r18, r24
    224e:	ad 01       	movw	r20, r26
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	92 e1       	ldi	r25, 0x12	; 18
    2254:	aa e7       	ldi	r26, 0x7A	; 122
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__udivmodsi4>
    2260:	da 01       	movw	r26, r20
    2262:	c9 01       	movw	r24, r18
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	1e c0       	rjmp	.+60     	; 0x22a8 <UART_init+0x1d6>
	}

	/* Calculate the UBRR register value */
	else if((Config_Ptr -> operating_mode)==Synch_Master){
    226c:	eb 81       	ldd	r30, Y+3	; 0x03
    226e:	fc 81       	ldd	r31, Y+4	; 0x04
    2270:	87 81       	ldd	r24, Z+7	; 0x07
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	c9 f4       	brne	.+50     	; 0x22a8 <UART_init+0x1d6>
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 2UL))) - 1);
    2276:	eb 81       	ldd	r30, Y+3	; 0x03
    2278:	fc 81       	ldd	r31, Y+4	; 0x04
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	a2 81       	ldd	r26, Z+2	; 0x02
    2280:	b3 81       	ldd	r27, Z+3	; 0x03
    2282:	9c 01       	movw	r18, r24
    2284:	ad 01       	movw	r20, r26
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	44 1f       	adc	r20, r20
    228c:	55 1f       	adc	r21, r21
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	92 e1       	ldi	r25, 0x12	; 18
    2292:	aa e7       	ldi	r26, 0x7A	; 122
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__udivmodsi4>
    229e:	da 01       	movw	r26, r20
    22a0:	c9 01       	movw	r24, r18
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
	}
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    22a8:	e0 e4       	ldi	r30, 0x40	; 64
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	89 2f       	mov	r24, r25
    22b2:	99 27       	eor	r25, r25
    22b4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    22b6:	e9 e2       	ldi	r30, 0x29	; 41
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	80 83       	st	Z, r24
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	0f 92       	push	r0
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22d8:	eb e2       	ldi	r30, 0x2B	; 43
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	80 72       	andi	r24, 0x20	; 32
    22e4:	90 70       	andi	r25, 0x00	; 0
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	b9 f3       	breq	.-18     	; 0x22d8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    22ea:	ec e2       	ldi	r30, 0x2C	; 44
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2302:	eb e2       	ldi	r30, 0x2B	; 43
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	88 23       	and	r24, r24
    230a:	dc f7       	brge	.-10     	; 0x2302 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    230c:	ec e2       	ldi	r30, 0x2C	; 44
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(uint8 *Str, uint8 size_of_string)
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <UART_sendString+0x6>
    231e:	00 d0       	rcall	.+0      	; 0x2320 <UART_sendString+0x8>
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	9b 83       	std	Y+3, r25	; 0x03
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    232a:	19 82       	std	Y+1, r1	; 0x01
    232c:	0e c0       	rjmp	.+28     	; 0x234a <UART_sendString+0x32>

	/* Send the whole string */
	while(i < size_of_string)
	{
		UART_sendByte(Str[i]);
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	9b 81       	ldd	r25, Y+3	; 0x03
    2338:	fc 01       	movw	r30, r24
    233a:	e2 0f       	add	r30, r18
    233c:	f3 1f       	adc	r31, r19
    233e:	80 81       	ld	r24, Z
    2340:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_sendByte>
		i++;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(uint8 *Str, uint8 size_of_string)
{
	uint8 i = 0;

	/* Send the whole string */
	while(i < size_of_string)
    234a:	99 81       	ldd	r25, Y+1	; 0x01
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	98 17       	cp	r25, r24
    2350:	70 f3       	brcs	.-36     	; 0x232e <UART_sendString+0x16>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <UART_receiveString+0xa>
    236a:	0f 92       	push	r0
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	9b 83       	std	Y+3, r25	; 0x03
    2372:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2374:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	9b 81       	ldd	r25, Y+3	; 0x03
    2380:	8c 01       	movw	r16, r24
    2382:	02 0f       	add	r16, r18
    2384:	13 1f       	adc	r17, r19
    2386:	0e 94 7d 11 	call	0x22fa	; 0x22fa <UART_recieveByte>
    238a:	f8 01       	movw	r30, r16
    238c:	80 83       	st	Z, r24
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 'n')
	{
		i++;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	8f 5f       	subi	r24, 0xFF	; 255
    2394:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	8c 01       	movw	r16, r24
    23a2:	02 0f       	add	r16, r18
    23a4:	13 1f       	adc	r17, r19
    23a6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <UART_recieveByte>
    23aa:	f8 01       	movw	r30, r16
    23ac:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 'n')
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	fc 01       	movw	r30, r24
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	80 81       	ld	r24, Z
    23c0:	8e 36       	cpi	r24, 0x6E	; 110
    23c2:	31 f7       	brne	.-52     	; 0x2390 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	fc 01       	movw	r30, r24
    23d0:	e2 0f       	add	r30, r18
    23d2:	f3 1f       	adc	r31, r19
    23d4:	10 82       	st	Z, r1
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	08 95       	ret

000023e6 <__udivmodsi4>:
    23e6:	a1 e2       	ldi	r26, 0x21	; 33
    23e8:	1a 2e       	mov	r1, r26
    23ea:	aa 1b       	sub	r26, r26
    23ec:	bb 1b       	sub	r27, r27
    23ee:	fd 01       	movw	r30, r26
    23f0:	0d c0       	rjmp	.+26     	; 0x240c <__udivmodsi4_ep>

000023f2 <__udivmodsi4_loop>:
    23f2:	aa 1f       	adc	r26, r26
    23f4:	bb 1f       	adc	r27, r27
    23f6:	ee 1f       	adc	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	a2 17       	cp	r26, r18
    23fc:	b3 07       	cpc	r27, r19
    23fe:	e4 07       	cpc	r30, r20
    2400:	f5 07       	cpc	r31, r21
    2402:	20 f0       	brcs	.+8      	; 0x240c <__udivmodsi4_ep>
    2404:	a2 1b       	sub	r26, r18
    2406:	b3 0b       	sbc	r27, r19
    2408:	e4 0b       	sbc	r30, r20
    240a:	f5 0b       	sbc	r31, r21

0000240c <__udivmodsi4_ep>:
    240c:	66 1f       	adc	r22, r22
    240e:	77 1f       	adc	r23, r23
    2410:	88 1f       	adc	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	1a 94       	dec	r1
    2416:	69 f7       	brne	.-38     	; 0x23f2 <__udivmodsi4_loop>
    2418:	60 95       	com	r22
    241a:	70 95       	com	r23
    241c:	80 95       	com	r24
    241e:	90 95       	com	r25
    2420:	9b 01       	movw	r18, r22
    2422:	ac 01       	movw	r20, r24
    2424:	bd 01       	movw	r22, r26
    2426:	cf 01       	movw	r24, r30
    2428:	08 95       	ret

0000242a <__prologue_saves__>:
    242a:	2f 92       	push	r2
    242c:	3f 92       	push	r3
    242e:	4f 92       	push	r4
    2430:	5f 92       	push	r5
    2432:	6f 92       	push	r6
    2434:	7f 92       	push	r7
    2436:	8f 92       	push	r8
    2438:	9f 92       	push	r9
    243a:	af 92       	push	r10
    243c:	bf 92       	push	r11
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	ca 1b       	sub	r28, r26
    2454:	db 0b       	sbc	r29, r27
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	09 94       	ijmp

00002462 <__epilogue_restores__>:
    2462:	2a 88       	ldd	r2, Y+18	; 0x12
    2464:	39 88       	ldd	r3, Y+17	; 0x11
    2466:	48 88       	ldd	r4, Y+16	; 0x10
    2468:	5f 84       	ldd	r5, Y+15	; 0x0f
    246a:	6e 84       	ldd	r6, Y+14	; 0x0e
    246c:	7d 84       	ldd	r7, Y+13	; 0x0d
    246e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2470:	9b 84       	ldd	r9, Y+11	; 0x0b
    2472:	aa 84       	ldd	r10, Y+10	; 0x0a
    2474:	b9 84       	ldd	r11, Y+9	; 0x09
    2476:	c8 84       	ldd	r12, Y+8	; 0x08
    2478:	df 80       	ldd	r13, Y+7	; 0x07
    247a:	ee 80       	ldd	r14, Y+6	; 0x06
    247c:	fd 80       	ldd	r15, Y+5	; 0x05
    247e:	0c 81       	ldd	r16, Y+4	; 0x04
    2480:	1b 81       	ldd	r17, Y+3	; 0x03
    2482:	aa 81       	ldd	r26, Y+2	; 0x02
    2484:	b9 81       	ldd	r27, Y+1	; 0x01
    2486:	ce 0f       	add	r28, r30
    2488:	d1 1d       	adc	r29, r1
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	ed 01       	movw	r28, r26
    2496:	08 95       	ret

00002498 <_exit>:
    2498:	f8 94       	cli

0000249a <__stop_program>:
    249a:	ff cf       	rjmp	.-2      	; 0x249a <__stop_program>
